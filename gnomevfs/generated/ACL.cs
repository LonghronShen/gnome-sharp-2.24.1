// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome.Vfs {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ACL : GLib.Object {

		[Obsolete]
		protected ACL(GLib.GType gtype) : base(gtype) {}
		public ACL(IntPtr raw) : base(raw) {}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_acl_new();

		public ACL () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ACL)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gnome_vfs_acl_new();
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_acl_kind_to_string(uint kind);

		public static string KindToString(uint kind) {
			IntPtr raw_ret = gnome_vfs_acl_kind_to_string(kind);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_acl_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_vfs_acl_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_acl_clear(IntPtr raw);

		public void Clear() {
			gnome_vfs_acl_clear(Handle);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_acl_free_ace_list(IntPtr ace_list);

		public static void FreeAceList(GLib.List ace_list) {
			gnome_vfs_acl_free_ace_list(ace_list == null ? IntPtr.Zero : ace_list.Handle);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_acl_get_ace_list(IntPtr raw);

		public GLib.List AceList { 
			get {
				IntPtr raw_ret = gnome_vfs_acl_get_ace_list(Handle);
				GLib.List ret = new GLib.List(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_acl_perm_to_string(uint perm);

		public static string PermToString(uint perm) {
			IntPtr raw_ret = gnome_vfs_acl_perm_to_string(perm);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}


		static ACL ()
		{
			GtkSharp.GnomeVfsSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}
