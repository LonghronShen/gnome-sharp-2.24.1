// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome.Vfs {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Address : GLib.Opaque {

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_address_get_family_type(IntPtr raw);

		public int FamilyType { 
			get {
				int raw_ret = gnome_vfs_address_get_family_type(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_address_match(IntPtr raw, IntPtr b, uint prefix);

		public bool Match(Gnome.Vfs.Address b, uint prefix) {
			bool raw_ret = gnome_vfs_address_match(Handle, b == null ? IntPtr.Zero : b.Handle, prefix);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_address_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_vfs_address_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gnome_vfs_address_get_ipv4(IntPtr raw);

		public uint Ipv4 { 
			get {
				uint raw_ret = gnome_vfs_address_get_ipv4(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_address_dup(IntPtr raw);

		public Gnome.Vfs.Address Dup() {
			IntPtr raw_ret = gnome_vfs_address_dup(Handle);
			Gnome.Vfs.Address ret = raw_ret == IntPtr.Zero ? null : (Gnome.Vfs.Address) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.Vfs.Address), false);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_address_to_string(IntPtr raw);

		public override string ToString() {
			IntPtr raw_ret = gnome_vfs_address_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_address_equal(IntPtr raw, IntPtr b);

		public bool Equal(Gnome.Vfs.Address b) {
			bool raw_ret = gnome_vfs_address_equal(Handle, b == null ? IntPtr.Zero : b.Handle);
			bool ret = raw_ret;
			return ret;
		}

		public Address(IntPtr raw) : base(raw) {}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_address_new_from_ipv4(uint ipv4_address);

		public Address (uint ipv4_address) 
		{
			Raw = gnome_vfs_address_new_from_ipv4(ipv4_address);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_address_new_from_string(IntPtr address);

		public Address (string address) 
		{
			IntPtr native_address = GLib.Marshaller.StringToPtrGStrdup (address);
			Raw = gnome_vfs_address_new_from_string(native_address);
			GLib.Marshaller.Free (native_address);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_address_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gnome_vfs_address_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gnome_vfs_address_free (handle);
				return false;
			}
		}

		~Address ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
