// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome.Vfs {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Application {

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_application_registry_get_bool_value(IntPtr app_id, IntPtr key, out bool got_key);

		[Obsolete]
		public static bool RegistryGetBoolValue(string app_id, string key, out bool got_key) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			bool raw_ret = gnome_vfs_application_registry_get_bool_value(native_app_id, native_key, out got_key);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_app_id);
			GLib.Marshaller.Free (native_key);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_application_registry_set_bool_value(IntPtr app_id, IntPtr key, bool value);

		[Obsolete]
		public static void RegistrySetBoolValue(string app_id, string key, bool value) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			gnome_vfs_application_registry_set_bool_value(native_app_id, native_key, value);
			GLib.Marshaller.Free (native_app_id);
			GLib.Marshaller.Free (native_key);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_application_is_user_owned_application(IntPtr application);

		[Obsolete]
		public static bool IsUserOwnedApplication(Gnome.Vfs.MimeApplication application) {
			bool raw_ret = gnome_vfs_application_is_user_owned_application(application == null ? IntPtr.Zero : application.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_application_registry_add_mime_type(IntPtr app_id, IntPtr mime_type);

		[Obsolete]
		public static void RegistryAddMimeType(string app_id, string mime_type) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
			gnome_vfs_application_registry_add_mime_type(native_app_id, native_mime_type);
			GLib.Marshaller.Free (native_app_id);
			GLib.Marshaller.Free (native_mime_type);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_application_registry_remove_application(IntPtr app_id);

		[Obsolete]
		public static void RegistryRemoveApplication(string app_id) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			gnome_vfs_application_registry_remove_application(native_app_id);
			GLib.Marshaller.Free (native_app_id);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_application_registry_get_keys(IntPtr app_id);

		[Obsolete]
		public static GLib.List RegistryGetKeys(string app_id) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			IntPtr raw_ret = gnome_vfs_application_registry_get_keys(native_app_id);
			GLib.List ret = new GLib.List(raw_ret);
			GLib.Marshaller.Free (native_app_id);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_application_registry_supports_mime_type(IntPtr app_id, IntPtr mime_type);

		[Obsolete]
		public static bool RegistrySupportsMimeType(string app_id, string mime_type) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
			bool raw_ret = gnome_vfs_application_registry_supports_mime_type(native_app_id, native_mime_type);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_app_id);
			GLib.Marshaller.Free (native_mime_type);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_application_registry_supports_uri_scheme(IntPtr app_id, IntPtr uri_scheme);

		[Obsolete]
		public static bool RegistrySupportsUriScheme(string app_id, string uri_scheme) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			IntPtr native_uri_scheme = GLib.Marshaller.StringToPtrGStrdup (uri_scheme);
			bool raw_ret = gnome_vfs_application_registry_supports_uri_scheme(native_app_id, native_uri_scheme);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_app_id);
			GLib.Marshaller.Free (native_uri_scheme);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_application_registry_peek_value(IntPtr app_id, IntPtr key);

		[Obsolete]
		public static string RegistryPeekValue(string app_id, string key) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			IntPtr raw_ret = gnome_vfs_application_registry_peek_value(native_app_id, native_key);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_app_id);
			GLib.Marshaller.Free (native_key);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_application_registry_set_value(IntPtr app_id, IntPtr key, IntPtr value);

		[Obsolete]
		public static void RegistrySetValue(string app_id, string key, string value) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
			gnome_vfs_application_registry_set_value(native_app_id, native_key, native_value);
			GLib.Marshaller.Free (native_app_id);
			GLib.Marshaller.Free (native_key);
			GLib.Marshaller.Free (native_value);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_application_registry_exists(IntPtr app_id);

		[Obsolete]
		public static bool RegistryExists(string app_id) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			bool raw_ret = gnome_vfs_application_registry_exists(native_app_id);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_app_id);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_application_registry_remove_mime_type(IntPtr app_id, IntPtr mime_type);

		[Obsolete]
		public static void RegistryRemoveMimeType(string app_id, string mime_type) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
			gnome_vfs_application_registry_remove_mime_type(native_app_id, native_mime_type);
			GLib.Marshaller.Free (native_app_id);
			GLib.Marshaller.Free (native_mime_type);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_application_registry_save_mime_application(IntPtr application);

		[Obsolete]
		public static void RegistrySaveMimeApplication(Gnome.Vfs.MimeApplication application) {
			gnome_vfs_application_registry_save_mime_application(application == null ? IntPtr.Zero : application.Handle);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_application_registry_reload();

		[Obsolete]
		public static void RegistryReload() {
			gnome_vfs_application_registry_reload();
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_application_registry_unset_key(IntPtr app_id, IntPtr key);

		[Obsolete]
		public static void RegistryUnsetKey(string app_id, string key) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			IntPtr native_key = GLib.Marshaller.StringToPtrGStrdup (key);
			gnome_vfs_application_registry_unset_key(native_app_id, native_key);
			GLib.Marshaller.Free (native_app_id);
			GLib.Marshaller.Free (native_key);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_application_registry_sync();

		[Obsolete]
		public static Gnome.Vfs.Result RegistrySync() {
			int raw_ret = gnome_vfs_application_registry_sync();
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_application_registry_get_mime_types(IntPtr app_id);

		[Obsolete]
		public static GLib.List RegistryGetMimeTypes(string app_id) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			IntPtr raw_ret = gnome_vfs_application_registry_get_mime_types(native_app_id);
			GLib.List ret = new GLib.List(raw_ret);
			GLib.Marshaller.Free (native_app_id);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_application_registry_shutdown();

		[Obsolete]
		public static void RegistryShutdown() {
			gnome_vfs_application_registry_shutdown();
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_application_registry_clear_mime_types(IntPtr app_id);

		[Obsolete]
		public static void RegistryClearMimeTypes(string app_id) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			gnome_vfs_application_registry_clear_mime_types(native_app_id);
			GLib.Marshaller.Free (native_app_id);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_application_registry_get_mime_application(IntPtr app_id);

		[Obsolete]
		public static Gnome.Vfs.MimeApplication RegistryGetMimeApplication(string app_id) {
			IntPtr native_app_id = GLib.Marshaller.StringToPtrGStrdup (app_id);
			IntPtr raw_ret = gnome_vfs_application_registry_get_mime_application(native_app_id);
			Gnome.Vfs.MimeApplication ret = raw_ret == IntPtr.Zero ? null : (Gnome.Vfs.MimeApplication) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.Vfs.MimeApplication), false);
			GLib.Marshaller.Free (native_app_id);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_application_registry_get_applications(IntPtr mime_type);

		[Obsolete]
		public static GLib.List RegistryGetApplications(string mime_type) {
			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
			IntPtr raw_ret = gnome_vfs_application_registry_get_applications(native_mime_type);
			GLib.List ret = new GLib.List(raw_ret);
			GLib.Marshaller.Free (native_mime_type);
			return ret;
		}

#endregion
	}
}
