// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome.Vfs {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class MimeMonitor : GLib.Object {

		[Obsolete]
		protected MimeMonitor(GLib.GType gtype) : base(gtype) {}
		public MimeMonitor(IntPtr raw) : base(raw) {}

		protected MimeMonitor() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DataChangedVMDelegate (IntPtr monitor);

		static DataChangedVMDelegate DataChangedVMCallback;

		static void datachanged_cb (IntPtr monitor)
		{
			try {
				MimeMonitor monitor_managed = GLib.Object.GetObject (monitor, false) as MimeMonitor;
				monitor_managed.OnDataChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDataChanged (GLib.GType gtype)
		{
			if (DataChangedVMCallback == null)
				DataChangedVMCallback = new DataChangedVMDelegate (datachanged_cb);
			OverrideVirtualMethod (gtype, "data_changed", DataChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.MimeMonitor), ConnectionMethod="OverrideDataChanged")]
		protected virtual void OnDataChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("data_changed")]
		public event System.EventHandler DataChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "data_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "data_changed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_mime_monitor_get();

		public static Gnome.Vfs.MimeMonitor Get() {
			IntPtr raw_ret = gnome_vfs_mime_monitor_get();
			Gnome.Vfs.MimeMonitor ret = GLib.Object.GetObject(raw_ret) as Gnome.Vfs.MimeMonitor;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_mime_monitor_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_vfs_mime_monitor_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}


		static MimeMonitor ()
		{
			GtkSharp.GnomeVfsSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}
