// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome.Vfs {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Uri : GLib.Opaque {

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_extract_short_name(IntPtr raw);

		public string ExtractShortName() {
			IntPtr raw_ret = gnome_vfs_uri_extract_short_name(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_make_full_from_relative(IntPtr base_uri, IntPtr relative_uri);

		public static string MakeFullFromRelative(string base_uri, string relative_uri) {
			IntPtr native_base_uri = GLib.Marshaller.StringToPtrGStrdup (base_uri);
			IntPtr native_relative_uri = GLib.Marshaller.StringToPtrGStrdup (relative_uri);
			IntPtr raw_ret = gnome_vfs_uri_make_full_from_relative(native_base_uri, native_relative_uri);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_base_uri);
			GLib.Marshaller.Free (native_relative_uri);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_get_host_name(IntPtr raw);

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_uri_set_host_name(IntPtr raw, IntPtr host_name);

		public string HostName { 
			get {
				IntPtr raw_ret = gnome_vfs_uri_get_host_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_vfs_uri_set_host_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_uri_exists(IntPtr raw);

		public bool Exists { 
			get {
				bool raw_ret = gnome_vfs_uri_exists(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_extract_short_path_name(IntPtr raw);

		public string ExtractShortPathName() {
			IntPtr raw_ret = gnome_vfs_uri_extract_short_path_name(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gnome_vfs_uri_get_host_port(IntPtr raw);

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_uri_set_host_port(IntPtr raw, uint host_port);

		public uint HostPort { 
			get {
				uint raw_ret = gnome_vfs_uri_get_host_port(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set {
				gnome_vfs_uri_set_host_port(Handle, value);
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_get_path(IntPtr raw);

		public string Path { 
			get {
				IntPtr raw_ret = gnome_vfs_uri_get_path(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_get_user_name(IntPtr raw);

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_uri_set_user_name(IntPtr raw, IntPtr user_name);

		public string UserName { 
			get {
				IntPtr raw_ret = gnome_vfs_uri_get_user_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_vfs_uri_set_user_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_append_string(IntPtr raw, IntPtr uri_fragment);

		public Gnome.Vfs.Uri AppendString(string uri_fragment) {
			IntPtr native_uri_fragment = GLib.Marshaller.StringToPtrGStrdup (uri_fragment);
			IntPtr raw_ret = gnome_vfs_uri_append_string(Handle, native_uri_fragment);
			Gnome.Vfs.Uri ret = raw_ret == IntPtr.Zero ? null : (Gnome.Vfs.Uri) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.Vfs.Uri), false);
			GLib.Marshaller.Free (native_uri_fragment);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_dup(IntPtr raw);

		public Gnome.Vfs.Uri Clone() {
			IntPtr raw_ret = gnome_vfs_uri_dup(Handle);
			Gnome.Vfs.Uri ret = raw_ret == IntPtr.Zero ? null : (Gnome.Vfs.Uri) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.Vfs.Uri), false);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_append_path(IntPtr raw, IntPtr path);

		public Gnome.Vfs.Uri AppendPath(string path) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr raw_ret = gnome_vfs_uri_append_path(Handle, native_path);
			Gnome.Vfs.Uri ret = raw_ret == IntPtr.Zero ? null : (Gnome.Vfs.Uri) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.Vfs.Uri), false);
			GLib.Marshaller.Free (native_path);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_get_fragment_identifier(IntPtr raw);

		public string FragmentIdentifier { 
			get {
				IntPtr raw_ret = gnome_vfs_uri_get_fragment_identifier(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_to_string(IntPtr raw, int hide_options);

		public string ToString(Gnome.Vfs.UriHideOptions hide_options) {
			IntPtr raw_ret = gnome_vfs_uri_to_string(Handle, (int) hide_options);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_get_password(IntPtr raw);

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_uri_set_password(IntPtr raw, IntPtr password);

		public string Password { 
			get {
				IntPtr raw_ret = gnome_vfs_uri_get_password(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_vfs_uri_set_password(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_uri_is_local(IntPtr raw);

		public bool IsLocal { 
			get {
				bool raw_ret = gnome_vfs_uri_is_local(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_resolve_symbolic_link(IntPtr raw, IntPtr relative_reference);

		public Gnome.Vfs.Uri ResolveSymbolicLink(string relative_reference) {
			IntPtr native_relative_reference = GLib.Marshaller.StringToPtrGStrdup (relative_reference);
			IntPtr raw_ret = gnome_vfs_uri_resolve_symbolic_link(Handle, native_relative_reference);
			Gnome.Vfs.Uri ret = raw_ret == IntPtr.Zero ? null : (Gnome.Vfs.Uri) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.Vfs.Uri), false);
			GLib.Marshaller.Free (native_relative_reference);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_extract_dirname(IntPtr raw);

		public string ExtractDirname() {
			IntPtr raw_ret = gnome_vfs_uri_extract_dirname(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_resolve_relative(IntPtr raw, IntPtr relative_reference);

		public Gnome.Vfs.Uri ResolveRelative(string relative_reference) {
			IntPtr native_relative_reference = GLib.Marshaller.StringToPtrGStrdup (relative_reference);
			IntPtr raw_ret = gnome_vfs_uri_resolve_relative(Handle, native_relative_reference);
			Gnome.Vfs.Uri ret = raw_ret == IntPtr.Zero ? null : (Gnome.Vfs.Uri) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.Vfs.Uri), false);
			GLib.Marshaller.Free (native_relative_reference);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_append_file_name(IntPtr raw, IntPtr filename);

		public Gnome.Vfs.Uri AppendFileName(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr raw_ret = gnome_vfs_uri_append_file_name(Handle, native_filename);
			Gnome.Vfs.Uri ret = raw_ret == IntPtr.Zero ? null : (Gnome.Vfs.Uri) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.Vfs.Uri), false);
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_get_parent(IntPtr raw);

		public Gnome.Vfs.Uri Parent { 
			get {
				IntPtr raw_ret = gnome_vfs_uri_get_parent(Handle);
				Gnome.Vfs.Uri ret = raw_ret == IntPtr.Zero ? null : (Gnome.Vfs.Uri) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.Vfs.Uri), false);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_uri_has_parent(IntPtr raw);

		public bool HasParent { 
			get {
				bool raw_ret = gnome_vfs_uri_has_parent(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_get_scheme(IntPtr raw);

		public string Scheme { 
			get {
				IntPtr raw_ret = gnome_vfs_uri_get_scheme(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_uri_is_parent(IntPtr raw, IntPtr possible_child, bool recursive);

		public bool IsParent(Gnome.Vfs.Uri possible_child, bool recursive) {
			bool raw_ret = gnome_vfs_uri_is_parent(Handle, possible_child == null ? IntPtr.Zero : possible_child.Handle, recursive);
			bool ret = raw_ret;
			return ret;
		}

		public Uri(IntPtr raw) : base(raw) {}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_new(IntPtr text_uri);

		public Uri (string text_uri) 
		{
			IntPtr native_text_uri = GLib.Marshaller.StringToPtrGStrdup (text_uri);
			Raw = gnome_vfs_uri_new(native_text_uri);
			GLib.Marshaller.Free (native_text_uri);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_uri_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				gnome_vfs_uri_ref (raw);
				Owned = true;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_uri_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				gnome_vfs_uri_unref (raw);
				Owned = false;
			}
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gnome_vfs_uri_unref (handle);
				return false;
			}
		}

		~Uri ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
#region Customized extensions
#line 1 "Uri.custom"
//  Uri.custom - Uri class customizations.
//
//  Authors:  Jeroen Zwartepoorte  <jeroen@xs4all.nl>
//
//  Copyright (c) 2004 Jeroen Zwartepoorte
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		public MimeType MimeType {
			get {
				return new MimeType (this);
			}
		}
		
		[DllImport("gnomevfs-2")]
		static extern Result gnome_vfs_get_volume_free_space (IntPtr raw, out long size);

		public long VolumeFreeSpace {
			get {
				long size = 0L;
				Result result = gnome_vfs_get_volume_free_space (Handle, out size);
				Vfs.ThrowException (this, result);
				return size;
			}
		}

		public FileInfo GetFileInfo ()
		{
			return GetFileInfo (FileInfoOptions.Default);
		}

		public FileInfo GetFileInfo (FileInfoOptions options)
		{
			return new FileInfo (this, options);
		}

		[DllImport("gnomevfs-2")]
		static extern Result gnome_vfs_set_file_info_uri (IntPtr raw, IntPtr info, SetFileInfoMask mask);

		public Result SetFileInfo (FileInfo info, SetFileInfoMask mask)
		{
			return gnome_vfs_set_file_info_uri (Handle, info.Handle, mask);
		}

		[DllImport("gnomevfs-2")]
		static extern bool gnome_vfs_uri_equal(IntPtr raw, IntPtr b);

		public override bool Equals (object o) {
			if (o is Uri) {
				Uri uri = o as Uri;
				return gnome_vfs_uri_equal (Handle, uri.Handle);
			} else {
				return false;
			}
		}

		[DllImport("gnomevfs-2")]
		static extern uint gnome_vfs_uri_hash(IntPtr p);

		public override int GetHashCode () {
			return checked ((int)gnome_vfs_uri_hash (Handle));
		}

		public override string ToString ()
		{
			return ToString (UriHideOptions.None);
		}

		[DllImport ("gnomevfs-2")]
		private static extern Result gnome_vfs_truncate_uri (IntPtr raw, ulong length);
		
		public Result Truncate (ulong length)
		{
			return gnome_vfs_truncate_uri (Handle, length);
		}
		
		[DllImport ("gnomevfs-2")]
		private static extern Result gnome_vfs_unlink_from_uri (IntPtr raw);
		
		public Result Unlink ()
		{
			return gnome_vfs_unlink_from_uri (Handle);
		}

		[DllImport("gnomevfs-2")]
		static extern IntPtr gnome_vfs_get_local_path_from_uri (IntPtr uri);

		public static string GetLocalPathFromUri (string uri)
		{
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr result = gnome_vfs_get_local_path_from_uri (native);
			GLib.Marshaller.Free (native);
			return GLib.Marshaller.PtrToStringGFree (result);
		}
		
		[DllImport("gnomevfs-2")]
		static extern IntPtr gnome_vfs_get_uri_from_local_path (IntPtr path);

		public static string GetUriFromLocalPath (string path)
		{
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr result = gnome_vfs_get_uri_from_local_path (native);
			GLib.Marshaller.Free (native);
			return GLib.Marshaller.PtrToStringGFree (result);
		}

		[DllImport("gnomevfs-2")]
		static extern IntPtr gnome_vfs_uri_list_parse(IntPtr uri_list);

		public static Uri[] ParseList (string uri_list) {
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (uri_list);
			IntPtr raw_ret = gnome_vfs_uri_list_parse(native);
			GLib.Marshaller.Free (native);
			GLib.List list = new GLib.List(raw_ret);
			Uri[] uris = new Uri [list.Count];
			for (int i = 0; i < list.Count; i++)
				uris[i] = list[i] as Uri;
			list.Dispose ();
			return uris;
		}

#endregion
	}
}
