// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome.Vfs {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Global {

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_special_mime_type(IntPtr uri);

		public static string GetSpecialMimeType(Gnome.Vfs.Uri uri) {
			IntPtr raw_ret = gnome_vfs_get_special_mime_type(uri == null ? IntPtr.Zero : uri.Handle);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_set_file_info(IntPtr text_uri, IntPtr info, int mask);

		public static Gnome.Vfs.Result SetFileInfo(string text_uri, Gnome.Vfs.FileInfo info, Gnome.Vfs.SetFileInfoMask mask) {
			IntPtr native_text_uri = GLib.Marshaller.StringToPtrGStrdup (text_uri);
			int raw_ret = gnome_vfs_set_file_info(native_text_uri, info == null ? IntPtr.Zero : info.Handle, (int) mask);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			GLib.Marshaller.Free (native_text_uri);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_result_from_h_errno();

		public static Gnome.Vfs.Result ResultFromHErrno() {
			int raw_ret = gnome_vfs_result_from_h_errno();
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_uris_match(IntPtr uri_1, IntPtr uri_2);

		public static bool UrisMatch(string uri_1, string uri_2) {
			IntPtr native_uri_1 = GLib.Marshaller.StringToPtrGStrdup (uri_1);
			IntPtr native_uri_2 = GLib.Marshaller.StringToPtrGStrdup (uri_2);
			bool raw_ret = gnome_vfs_uris_match(native_uri_1, native_uri_2);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_uri_1);
			GLib.Marshaller.Free (native_uri_2);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_set_file_info_uri(IntPtr uri, IntPtr info, int mask);

		public static Gnome.Vfs.Result SetFileInfoUri(Gnome.Vfs.Uri uri, Gnome.Vfs.FileInfo info, Gnome.Vfs.SetFileInfoMask mask) {
			int raw_ret = gnome_vfs_set_file_info_uri(uri == null ? IntPtr.Zero : uri.Handle, info == null ? IntPtr.Zero : info.Handle, (int) mask);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_uri_scheme(IntPtr uri);

		public static string GetUriScheme(string uri) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr raw_ret = gnome_vfs_get_uri_scheme(native_uri);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_uri);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_result_from_errno_code(int errno_code);

		public static Gnome.Vfs.Result ResultFromErrnoCode(int errno_code) {
			int raw_ret = gnome_vfs_result_from_errno_code(errno_code);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_result_from_errno();

		public static Gnome.Vfs.Result ResultFromErrno() {
			int raw_ret = gnome_vfs_result_from_errno();
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_get_file_info_uri(IntPtr uri, IntPtr info, int options);

		public static Gnome.Vfs.Result GetFileInfoUri(Gnome.Vfs.Uri uri, Gnome.Vfs.FileInfo info, Gnome.Vfs.FileInfoOptions options) {
			int raw_ret = gnome_vfs_get_file_info_uri(uri == null ? IntPtr.Zero : uri.Handle, info == null ? IntPtr.Zero : info.Handle, (int) options);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_mime_type_from_uri(IntPtr uri);

		public static string GetMimeTypeFromUri(Gnome.Vfs.Uri uri) {
			IntPtr raw_ret = gnome_vfs_get_mime_type_from_uri(uri == null ? IntPtr.Zero : uri.Handle);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_local_path_from_uri(IntPtr uri);

		public static string GetLocalPathFromUri(string uri) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr raw_ret = gnome_vfs_get_local_path_from_uri(native_uri);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_uri);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_remove_directory_from_uri_cancellable(IntPtr uri, IntPtr context);

		public static Gnome.Vfs.Result RemoveDirectoryFromUriCancellable(Gnome.Vfs.Uri uri, Gnome.Vfs.Context context) {
			int raw_ret = gnome_vfs_remove_directory_from_uri_cancellable(uri == null ? IntPtr.Zero : uri.Handle, context == null ? IntPtr.Zero : context.Handle);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_write_cancellable(IntPtr handle, IntPtr buffer, long bytes, out long bytes_written, IntPtr context);

		public static Gnome.Vfs.Result WriteCancellable(Gnome.Vfs.Handle handle, IntPtr buffer, long bytes, out long bytes_written, Gnome.Vfs.Context context) {
			int raw_ret = gnome_vfs_write_cancellable(handle == null ? IntPtr.Zero : handle.Handle, buffer, bytes, out bytes_written, context == null ? IntPtr.Zero : context.Handle);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_volume_monitor();

		public static Gnome.Vfs.VolumeMonitor VolumeMonitor { 
			get {
				IntPtr raw_ret = gnome_vfs_get_volume_monitor();
				Gnome.Vfs.VolumeMonitor ret = GLib.Object.GetObject(raw_ret) as Gnome.Vfs.VolumeMonitor;
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_connect_to_server(IntPtr uri, IntPtr display_name, IntPtr icon);

		public static void ConnectToServer(string uri, string display_name, string icon) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr native_display_name = GLib.Marshaller.StringToPtrGStrdup (display_name);
			IntPtr native_icon = GLib.Marshaller.StringToPtrGStrdup (icon);
			gnome_vfs_connect_to_server(native_uri, native_display_name, native_icon);
			GLib.Marshaller.Free (native_uri);
			GLib.Marshaller.Free (native_display_name);
			GLib.Marshaller.Free (native_icon);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_set_file_info_cancellable(IntPtr a, IntPtr info, int mask, IntPtr context);

		public static Gnome.Vfs.Result SetFileInfoCancellable(Gnome.Vfs.Uri a, Gnome.Vfs.FileInfo info, Gnome.Vfs.SetFileInfoMask mask, Gnome.Vfs.Context context) {
			int raw_ret = gnome_vfs_set_file_info_cancellable(a == null ? IntPtr.Zero : a.Handle, info == null ? IntPtr.Zero : info.Handle, (int) mask, context == null ? IntPtr.Zero : context.Handle);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_mime_type(IntPtr text_uri);

		public static string GetMimeType(string text_uri) {
			IntPtr native_text_uri = GLib.Marshaller.StringToPtrGStrdup (text_uri);
			IntPtr raw_ret = gnome_vfs_get_mime_type(native_text_uri);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_text_uri);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_uri_from_local_path(IntPtr local_full_path);

		public static string GetUriFromLocalPath(string local_full_path) {
			IntPtr native_local_full_path = GLib.Marshaller.StringToPtrGStrdup (local_full_path);
			IntPtr raw_ret = gnome_vfs_get_uri_from_local_path(native_local_full_path);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_local_full_path);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_mime_type_for_data(IntPtr data, int data_size);

		public static string GetMimeTypeForData(IntPtr data, int data_size) {
			IntPtr raw_ret = gnome_vfs_get_mime_type_for_data(data, data_size);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_expand_initial_tilde(IntPtr path);

		public static string ExpandInitialTilde(string path) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr raw_ret = gnome_vfs_expand_initial_tilde(native_path);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_path);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_remove_directory(IntPtr text_uri);

		public static Gnome.Vfs.Result RemoveDirectory(string text_uri) {
			IntPtr native_text_uri = GLib.Marshaller.StringToPtrGStrdup (text_uri);
			int raw_ret = gnome_vfs_remove_directory(native_text_uri);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			GLib.Marshaller.Free (native_text_uri);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_get_file_info_from_handle_cancellable(IntPtr handle, IntPtr info, int options, IntPtr context);

		public static Gnome.Vfs.Result GetFileInfoFromHandleCancellable(Gnome.Vfs.Handle handle, Gnome.Vfs.FileInfo info, Gnome.Vfs.FileInfoOptions options, Gnome.Vfs.Context context) {
			int raw_ret = gnome_vfs_get_file_info_from_handle_cancellable(handle == null ? IntPtr.Zero : handle.Handle, info == null ? IntPtr.Zero : info.Handle, (int) options, context == null ? IntPtr.Zero : context.Handle);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_set_meta_for_list(IntPtr info, IntPtr file_name, IntPtr meta_keys);

		public static Gnome.Vfs.Result SetMetaForList(Gnome.Vfs.FileInfo info, string file_name, GLib.List meta_keys) {
			IntPtr native_file_name = GLib.Marshaller.StringToPtrGStrdup (file_name);
			int raw_ret = gnome_vfs_set_meta_for_list(info == null ? IntPtr.Zero : info.Handle, native_file_name, meta_keys == null ? IntPtr.Zero : meta_keys.Handle);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			GLib.Marshaller.Free (native_file_name);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_remove_directory_from_uri(IntPtr uri);

		public static Gnome.Vfs.Result RemoveDirectoryFromUri(Gnome.Vfs.Uri uri) {
			int raw_ret = gnome_vfs_remove_directory_from_uri(uri == null ? IntPtr.Zero : uri.Handle);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_registered_mime_types();

		[Obsolete]
		public static GLib.List RegisteredMimeTypes { 
			get {
				IntPtr raw_ret = gnome_vfs_get_registered_mime_types();
				GLib.List ret = new GLib.List(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_mime_type_common(IntPtr uri);

		public static string GetMimeTypeCommon(Gnome.Vfs.Uri uri) {
			IntPtr raw_ret = gnome_vfs_get_mime_type_common(uri == null ? IntPtr.Zero : uri.Handle);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_result_to_string(int result);

		public static string ResultToString(Gnome.Vfs.Result result) {
			IntPtr raw_ret = gnome_vfs_result_to_string((int) result);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_mime_type_for_name(IntPtr filename);

		public static string GetMimeTypeForName(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr raw_ret = gnome_vfs_get_mime_type_for_name(native_filename);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_supertype_from_mime_type(IntPtr mime_type);

		public static string GetSupertypeFromMimeType(string mime_type) {
			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
			IntPtr raw_ret = gnome_vfs_get_supertype_from_mime_type(native_mime_type);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_mime_type);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_mime_type_for_name_and_data(IntPtr filename, IntPtr data, IntPtr data_size);

		public static string GetMimeTypeForNameAndData(string filename, IntPtr data, long data_size) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr raw_ret = gnome_vfs_get_mime_type_for_name_and_data(native_filename, data, new IntPtr (data_size));
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_set_meta(IntPtr info, IntPtr file_name, IntPtr meta_key);

		public static Gnome.Vfs.Result SetMeta(Gnome.Vfs.FileInfo info, string file_name, string meta_key) {
			IntPtr native_file_name = GLib.Marshaller.StringToPtrGStrdup (file_name);
			IntPtr native_meta_key = GLib.Marshaller.StringToPtrGStrdup (meta_key);
			int raw_ret = gnome_vfs_set_meta(info == null ? IntPtr.Zero : info.Handle, native_file_name, native_meta_key);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			GLib.Marshaller.Free (native_file_name);
			GLib.Marshaller.Free (native_meta_key);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_forget_cache(IntPtr handle, ulong offset, long size);

		public static Gnome.Vfs.Result ForgetCache(Gnome.Vfs.Handle handle, ulong offset, long size) {
			int raw_ret = gnome_vfs_forget_cache(handle == null ? IntPtr.Zero : handle.Handle, offset, size);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_icon_path_from_filename(IntPtr filename);

		public static string IconPathFromFilename(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr raw_ret = gnome_vfs_icon_path_from_filename(native_filename);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_get_file_info_from_handle(IntPtr handle, IntPtr info, int options);

		public static Gnome.Vfs.Result GetFileInfoFromHandle(Gnome.Vfs.Handle handle, Gnome.Vfs.FileInfo info, Gnome.Vfs.FileInfoOptions options) {
			int raw_ret = gnome_vfs_get_file_info_from_handle(handle == null ? IntPtr.Zero : handle.Handle, info == null ? IntPtr.Zero : info.Handle, (int) options);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_get_volume_free_space(IntPtr vfs_uri, out long size);

		public static Gnome.Vfs.Result GetVolumeFreeSpace(Gnome.Vfs.Uri vfs_uri, out long size) {
			int raw_ret = gnome_vfs_get_volume_free_space(vfs_uri == null ? IntPtr.Zero : vfs_uri.Handle, out size);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_close_cancellable(IntPtr handle, IntPtr context);

		public static Gnome.Vfs.Result CloseCancellable(Gnome.Vfs.Handle handle, Gnome.Vfs.Context context) {
			int raw_ret = gnome_vfs_close_cancellable(handle == null ? IntPtr.Zero : handle.Handle, context == null ? IntPtr.Zero : context.Handle);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_seek_cancellable(IntPtr handle, int whence, ulong offset, IntPtr context);

		public static Gnome.Vfs.Result SeekCancellable(Gnome.Vfs.Handle handle, Gnome.Vfs.SeekPosition whence, ulong offset, Gnome.Vfs.Context context) {
			int raw_ret = gnome_vfs_seek_cancellable(handle == null ? IntPtr.Zero : handle.Handle, (int) whence, offset, context == null ? IntPtr.Zero : context.Handle);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_result_from_h_errno_val(int h_errno_code);

		public static Gnome.Vfs.Result ResultFromHErrnoVal(int h_errno_code) {
			int raw_ret = gnome_vfs_result_from_h_errno_val(h_errno_code);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_get_file_info_uri_cancellable(IntPtr uri, IntPtr info, int options, IntPtr context);

		public static Gnome.Vfs.Result GetFileInfoUriCancellable(Gnome.Vfs.Uri uri, Gnome.Vfs.FileInfo info, Gnome.Vfs.FileInfoOptions options, Gnome.Vfs.Context context) {
			int raw_ret = gnome_vfs_get_file_info_uri_cancellable(uri == null ? IntPtr.Zero : uri.Handle, info == null ? IntPtr.Zero : info.Handle, (int) options, context == null ? IntPtr.Zero : context.Handle);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_mime_type_from_file_data(IntPtr uri);

		[Obsolete]
		public static string GetMimeTypeFromFileData(Gnome.Vfs.Uri uri) {
			IntPtr raw_ret = gnome_vfs_get_mime_type_from_file_data(uri == null ? IntPtr.Zero : uri.Handle);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_list_deep_free(IntPtr list);

		public static void ListDeepFree(GLib.List list) {
			gnome_vfs_list_deep_free(list == null ? IntPtr.Zero : list.Handle);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_get_file_info(IntPtr text_uri, IntPtr info, int options);

		public static Gnome.Vfs.Result GetFileInfo(string text_uri, Gnome.Vfs.FileInfo info, Gnome.Vfs.FileInfoOptions options) {
			IntPtr native_text_uri = GLib.Marshaller.StringToPtrGStrdup (text_uri);
			int raw_ret = gnome_vfs_get_file_info(native_text_uri, info == null ? IntPtr.Zero : info.Handle, (int) options);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			GLib.Marshaller.Free (native_text_uri);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_get_slow_mime_type(IntPtr text_uri);

		public static string GetSlowMimeType(string text_uri) {
			IntPtr native_text_uri = GLib.Marshaller.StringToPtrGStrdup (text_uri);
			IntPtr raw_ret = gnome_vfs_get_slow_mime_type(native_text_uri);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_text_uri);
			return ret;
		}

#endregion
	}
}
