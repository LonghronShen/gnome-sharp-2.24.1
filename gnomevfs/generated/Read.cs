// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome.Vfs {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Read {

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_read_cancellable(IntPtr handle, IntPtr buffer, long bytes, out long bytes_written, IntPtr context);

		public static Gnome.Vfs.Result Cancellable(Gnome.Vfs.Handle handle, IntPtr buffer, long bytes, out long bytes_written, Gnome.Vfs.Context context) {
			int raw_ret = gnome_vfs_read_cancellable(handle == null ? IntPtr.Zero : handle.Handle, buffer, bytes, out bytes_written, context == null ? IntPtr.Zero : context.Handle);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_read_entire_file(IntPtr uri, out int file_size, IntPtr file_contents);

		public static Gnome.Vfs.Result EntireFile(string uri, out int file_size, string file_contents) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			int raw_ret = gnome_vfs_read_entire_file(native_uri, out file_size, GLib.Marshaller.StringToPtrGStrdup(file_contents));
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			GLib.Marshaller.Free (native_uri);
			return ret;
		}

#endregion
	}
}
