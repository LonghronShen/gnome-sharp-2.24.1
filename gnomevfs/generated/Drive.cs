// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome.Vfs {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Drive : GLib.Object {

		[Obsolete]
		protected Drive(GLib.GType gtype) : base(gtype) {}
		public Drive(IntPtr raw) : base(raw) {}

		protected Drive() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void VolumePreUnmountVMDelegate (IntPtr drive, IntPtr volume);

		static VolumePreUnmountVMDelegate VolumePreUnmountVMCallback;

		static void volumepreunmount_cb (IntPtr drive, IntPtr volume)
		{
			try {
				Drive drive_managed = GLib.Object.GetObject (drive, false) as Drive;
				drive_managed.OnVolumePreUnmount (GLib.Object.GetObject(volume) as Gnome.Vfs.Volume);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideVolumePreUnmount (GLib.GType gtype)
		{
			if (VolumePreUnmountVMCallback == null)
				VolumePreUnmountVMCallback = new VolumePreUnmountVMDelegate (volumepreunmount_cb);
			OverrideVirtualMethod (gtype, "volume_pre_unmount", VolumePreUnmountVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.Drive), ConnectionMethod="OverrideVolumePreUnmount")]
		protected virtual void OnVolumePreUnmount (Gnome.Vfs.Volume volume)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (volume);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("volume_pre_unmount")]
		public event Gnome.Vfs.VolumePreUnmountHandler VolumePreUnmount {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume_pre_unmount", typeof (Gnome.Vfs.VolumePreUnmountArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume_pre_unmount", typeof (Gnome.Vfs.VolumePreUnmountArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void VolumeUnmountedVMDelegate (IntPtr drive, IntPtr volume);

		static VolumeUnmountedVMDelegate VolumeUnmountedVMCallback;

		static void volumeunmounted_cb (IntPtr drive, IntPtr volume)
		{
			try {
				Drive drive_managed = GLib.Object.GetObject (drive, false) as Drive;
				drive_managed.OnVolumeUnmounted (GLib.Object.GetObject(volume) as Gnome.Vfs.Volume);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideVolumeUnmounted (GLib.GType gtype)
		{
			if (VolumeUnmountedVMCallback == null)
				VolumeUnmountedVMCallback = new VolumeUnmountedVMDelegate (volumeunmounted_cb);
			OverrideVirtualMethod (gtype, "volume_unmounted", VolumeUnmountedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.Drive), ConnectionMethod="OverrideVolumeUnmounted")]
		protected virtual void OnVolumeUnmounted (Gnome.Vfs.Volume volume)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (volume);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("volume_unmounted")]
		public event Gnome.Vfs.VolumeUnmountedHandler VolumeUnmounted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume_unmounted", typeof (Gnome.Vfs.VolumeUnmountedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume_unmounted", typeof (Gnome.Vfs.VolumeUnmountedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void VolumeMountedVMDelegate (IntPtr drive, IntPtr volume);

		static VolumeMountedVMDelegate VolumeMountedVMCallback;

		static void volumemounted_cb (IntPtr drive, IntPtr volume)
		{
			try {
				Drive drive_managed = GLib.Object.GetObject (drive, false) as Drive;
				drive_managed.OnVolumeMounted (GLib.Object.GetObject(volume) as Gnome.Vfs.Volume);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideVolumeMounted (GLib.GType gtype)
		{
			if (VolumeMountedVMCallback == null)
				VolumeMountedVMCallback = new VolumeMountedVMDelegate (volumemounted_cb);
			OverrideVirtualMethod (gtype, "volume_mounted", VolumeMountedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.Drive), ConnectionMethod="OverrideVolumeMounted")]
		protected virtual void OnVolumeMounted (Gnome.Vfs.Volume volume)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (volume);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("volume_mounted")]
		public event Gnome.Vfs.VolumeMountedHandler VolumeMounted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume_mounted", typeof (Gnome.Vfs.VolumeMountedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume_mounted", typeof (Gnome.Vfs.VolumeMountedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_drive_get_hal_udi(IntPtr raw);

		public string HalUdi { 
			get {
				IntPtr raw_ret = gnome_vfs_drive_get_hal_udi(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_drive_get_display_name(IntPtr raw);

		public string DisplayName { 
			get {
				IntPtr raw_ret = gnome_vfs_drive_get_display_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_drive_get_icon(IntPtr raw);

		public string Icon { 
			get {
				IntPtr raw_ret = gnome_vfs_drive_get_icon(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gnome_vfs_drive_get_id(IntPtr raw);

		public ulong Id { 
			get {
				UIntPtr raw_ret = gnome_vfs_drive_get_id(Handle);
				ulong ret = (ulong) raw_ret;
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_drive_is_mounted(IntPtr raw);

		public bool IsMounted { 
			get {
				bool raw_ret = gnome_vfs_drive_is_mounted(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_drive_mount(IntPtr raw, Gnome.VfsSharp.VolumeOpCallbackNative cb, IntPtr user_data);

		public void Mount(Gnome.Vfs.VolumeOpCallback cb) {
			Gnome.VfsSharp.VolumeOpCallbackWrapper cb_wrapper = new Gnome.VfsSharp.VolumeOpCallbackWrapper (cb);
			gnome_vfs_drive_mount(Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_drive_get_activation_uri(IntPtr raw);

		public string ActivationUri { 
			get {
				IntPtr raw_ret = gnome_vfs_drive_get_activation_uri(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_drive_needs_eject(IntPtr raw);

		public bool NeedsEject() {
			bool raw_ret = gnome_vfs_drive_needs_eject(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_drive_get_device_path(IntPtr raw);

		public string DevicePath { 
			get {
				IntPtr raw_ret = gnome_vfs_drive_get_device_path(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_drive_eject(IntPtr raw, Gnome.VfsSharp.VolumeOpCallbackNative cb, IntPtr user_data);

		public void Eject(Gnome.Vfs.VolumeOpCallback cb) {
			Gnome.VfsSharp.VolumeOpCallbackWrapper cb_wrapper = new Gnome.VfsSharp.VolumeOpCallbackWrapper (cb);
			gnome_vfs_drive_eject(Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_drive_unmount(IntPtr raw, Gnome.VfsSharp.VolumeOpCallbackNative cb, IntPtr user_data);

		public void Unmount(Gnome.Vfs.VolumeOpCallback cb) {
			Gnome.VfsSharp.VolumeOpCallbackWrapper cb_wrapper = new Gnome.VfsSharp.VolumeOpCallbackWrapper (cb);
			gnome_vfs_drive_unmount(Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_drive_volume_list_free(IntPtr volumes);

		public static void VolumeListFree(GLib.List volumes) {
			gnome_vfs_drive_volume_list_free(volumes == null ? IntPtr.Zero : volumes.Handle);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_drive_get_mounted_volume(IntPtr raw);

		[Obsolete]
		public Gnome.Vfs.Volume MountedVolume { 
			get {
				IntPtr raw_ret = gnome_vfs_drive_get_mounted_volume(Handle);
				Gnome.Vfs.Volume ret = GLib.Object.GetObject(raw_ret) as Gnome.Vfs.Volume;
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_drive_compare(IntPtr raw, IntPtr b);

		public int Compare(Gnome.Vfs.Drive b) {
			int raw_ret = gnome_vfs_drive_compare(Handle, b == null ? IntPtr.Zero : b.Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_drive_get_mounted_volumes(IntPtr raw);

		public GLib.List MountedVolumes { 
			get {
				IntPtr raw_ret = gnome_vfs_drive_get_mounted_volumes(Handle);
				GLib.List ret = new GLib.List(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_drive_is_connected(IntPtr raw);

		public bool IsConnected { 
			get {
				bool raw_ret = gnome_vfs_drive_is_connected(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_drive_is_user_visible(IntPtr raw);

		public bool IsUserVisible { 
			get {
				bool raw_ret = gnome_vfs_drive_is_user_visible(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_drive_get_device_type(IntPtr raw);

		public Gnome.Vfs.DeviceType DeviceType { 
			get {
				int raw_ret = gnome_vfs_drive_get_device_type(Handle);
				Gnome.Vfs.DeviceType ret = (Gnome.Vfs.DeviceType) raw_ret;
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_drive_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_vfs_drive_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}


		static Drive ()
		{
			GtkSharp.GnomeVfsSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}
