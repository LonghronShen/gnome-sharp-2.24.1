// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome.Vfs {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class MimeApplication : GLib.Opaque {

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_mime_application_get_name(IntPtr raw);

		public string Name {
			get  {
				IntPtr raw_ret = gnome_vfs_mime_application_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_mime_application_get_binary_name(IntPtr raw);

		public string BinaryName { 
			get {
				IntPtr raw_ret = gnome_vfs_mime_application_get_binary_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_mime_application_get_desktop_file_path(IntPtr raw);

		public string DesktopFilePath { 
			get {
				IntPtr raw_ret = gnome_vfs_mime_application_get_desktop_file_path(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_mime_application_get_icon(IntPtr raw);

		public string Icon { 
			get {
				IntPtr raw_ret = gnome_vfs_mime_application_get_icon(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_mime_application_get_generic_name(IntPtr raw);

		public string GenericName { 
			get {
				IntPtr raw_ret = gnome_vfs_mime_application_get_generic_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_mime_application_equal(IntPtr raw, IntPtr app_b);

		public bool Equal(Gnome.Vfs.MimeApplication app_b) {
			bool raw_ret = gnome_vfs_mime_application_equal(Handle, app_b == null ? IntPtr.Zero : app_b.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_mime_application_get_exec(IntPtr raw);

		public string Exec { 
			get {
				IntPtr raw_ret = gnome_vfs_mime_application_get_exec(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_mime_application_list_free(IntPtr list);

		public static void ListFree(GLib.List list) {
			gnome_vfs_mime_application_list_free(list == null ? IntPtr.Zero : list.Handle);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_mime_application_supports_startup_notification(IntPtr raw);

		public bool SupportsStartupNotification() {
			bool raw_ret = gnome_vfs_mime_application_supports_startup_notification(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_mime_application_launch(IntPtr raw, IntPtr uris);

		public Gnome.Vfs.Result Launch(GLib.List uris) {
			int raw_ret = gnome_vfs_mime_application_launch(Handle, uris == null ? IntPtr.Zero : uris.Handle);
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_mime_application_get_startup_wm_class(IntPtr raw);

		public string StartupWmClass { 
			get {
				IntPtr raw_ret = gnome_vfs_mime_application_get_startup_wm_class(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_mime_application_get_desktop_id(IntPtr raw);

		public string DesktopId { 
			get {
				IntPtr raw_ret = gnome_vfs_mime_application_get_desktop_id(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_mime_application_requires_terminal(IntPtr raw);

		public bool RequiresTerminal() {
			bool raw_ret = gnome_vfs_mime_application_requires_terminal(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_vfs_mime_application_launch_with_env(IntPtr raw, IntPtr uris, IntPtr envp);

		public Gnome.Vfs.Result LaunchWithEnv(GLib.List uris, string envp) {
			int raw_ret = gnome_vfs_mime_application_launch_with_env(Handle, uris == null ? IntPtr.Zero : uris.Handle, GLib.Marshaller.StringToPtrGStrdup(envp));
			Gnome.Vfs.Result ret = (Gnome.Vfs.Result) raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_vfs_mime_application_supports_uris(IntPtr raw);

		public bool SupportsUris() {
			bool raw_ret = gnome_vfs_mime_application_supports_uris(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_mime_application_copy(IntPtr raw);

		public Gnome.Vfs.MimeApplication Copy() {
			IntPtr raw_ret = gnome_vfs_mime_application_copy(Handle);
			Gnome.Vfs.MimeApplication ret = raw_ret == IntPtr.Zero ? null : (Gnome.Vfs.MimeApplication) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.Vfs.MimeApplication), true);
			return ret;
		}

		public MimeApplication(IntPtr raw) : base(raw) {}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_mime_application_new_from_desktop_id(IntPtr id);

		public MimeApplication (string id) 
		{
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			Raw = gnome_vfs_mime_application_new_from_desktop_id(native_id);
			GLib.Marshaller.Free (native_id);
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_mime_application_new_from_id(IntPtr id);

		public static MimeApplication NewFromId(string id)
		{
			IntPtr native_id = GLib.Marshaller.StringToPtrGStrdup (id);
			MimeApplication result = new MimeApplication (gnome_vfs_mime_application_new_from_id(native_id));
			GLib.Marshaller.Free (native_id);
			return result;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_vfs_mime_application_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gnome_vfs_mime_application_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gnome_vfs_mime_application_free (handle);
				return false;
			}
		}

		~MimeApplication ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
