// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome.Vfs {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class VolumeMonitor : GLib.Object {

		[Obsolete]
		protected VolumeMonitor(GLib.GType gtype) : base(gtype) {}
		public VolumeMonitor(IntPtr raw) : base(raw) {}

		protected VolumeMonitor() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void VolumePreUnmountVMDelegate (IntPtr volume_monitor, IntPtr volume);

		static VolumePreUnmountVMDelegate VolumePreUnmountVMCallback;

		static void volumepreunmount_cb (IntPtr volume_monitor, IntPtr volume)
		{
			try {
				VolumeMonitor volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnVolumePreUnmount (GLib.Object.GetObject(volume) as Gnome.Vfs.Volume);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideVolumePreUnmount (GLib.GType gtype)
		{
			if (VolumePreUnmountVMCallback == null)
				VolumePreUnmountVMCallback = new VolumePreUnmountVMDelegate (volumepreunmount_cb);
			OverrideVirtualMethod (gtype, "volume_pre_unmount", VolumePreUnmountVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.VolumeMonitor), ConnectionMethod="OverrideVolumePreUnmount")]
		protected virtual void OnVolumePreUnmount (Gnome.Vfs.Volume volume)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (volume);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("volume_pre_unmount")]
		public event Gnome.Vfs.VolumePreUnmountHandler VolumePreUnmount {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume_pre_unmount", typeof (Gnome.Vfs.VolumePreUnmountArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume_pre_unmount", typeof (Gnome.Vfs.VolumePreUnmountArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DriveDisconnectedVMDelegate (IntPtr volume_monitor, IntPtr drive);

		static DriveDisconnectedVMDelegate DriveDisconnectedVMCallback;

		static void drivedisconnected_cb (IntPtr volume_monitor, IntPtr drive)
		{
			try {
				VolumeMonitor volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnDriveDisconnected (GLib.Object.GetObject(drive) as Gnome.Vfs.Drive);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDriveDisconnected (GLib.GType gtype)
		{
			if (DriveDisconnectedVMCallback == null)
				DriveDisconnectedVMCallback = new DriveDisconnectedVMDelegate (drivedisconnected_cb);
			OverrideVirtualMethod (gtype, "drive_disconnected", DriveDisconnectedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.VolumeMonitor), ConnectionMethod="OverrideDriveDisconnected")]
		protected virtual void OnDriveDisconnected (Gnome.Vfs.Drive drive)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (drive);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("drive_disconnected")]
		public event Gnome.Vfs.DriveDisconnectedHandler DriveDisconnected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive_disconnected", typeof (Gnome.Vfs.DriveDisconnectedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive_disconnected", typeof (Gnome.Vfs.DriveDisconnectedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void VolumeUnmountedVMDelegate (IntPtr volume_monitor, IntPtr volume);

		static VolumeUnmountedVMDelegate VolumeUnmountedVMCallback;

		static void volumeunmounted_cb (IntPtr volume_monitor, IntPtr volume)
		{
			try {
				VolumeMonitor volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnVolumeUnmounted (GLib.Object.GetObject(volume) as Gnome.Vfs.Volume);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideVolumeUnmounted (GLib.GType gtype)
		{
			if (VolumeUnmountedVMCallback == null)
				VolumeUnmountedVMCallback = new VolumeUnmountedVMDelegate (volumeunmounted_cb);
			OverrideVirtualMethod (gtype, "volume_unmounted", VolumeUnmountedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.VolumeMonitor), ConnectionMethod="OverrideVolumeUnmounted")]
		protected virtual void OnVolumeUnmounted (Gnome.Vfs.Volume volume)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (volume);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("volume_unmounted")]
		public event Gnome.Vfs.VolumeUnmountedHandler VolumeUnmounted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume_unmounted", typeof (Gnome.Vfs.VolumeUnmountedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume_unmounted", typeof (Gnome.Vfs.VolumeUnmountedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DriveConnectedVMDelegate (IntPtr volume_monitor, IntPtr drive);

		static DriveConnectedVMDelegate DriveConnectedVMCallback;

		static void driveconnected_cb (IntPtr volume_monitor, IntPtr drive)
		{
			try {
				VolumeMonitor volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnDriveConnected (GLib.Object.GetObject(drive) as Gnome.Vfs.Drive);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDriveConnected (GLib.GType gtype)
		{
			if (DriveConnectedVMCallback == null)
				DriveConnectedVMCallback = new DriveConnectedVMDelegate (driveconnected_cb);
			OverrideVirtualMethod (gtype, "drive_connected", DriveConnectedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.VolumeMonitor), ConnectionMethod="OverrideDriveConnected")]
		protected virtual void OnDriveConnected (Gnome.Vfs.Drive drive)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (drive);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("drive_connected")]
		public event Gnome.Vfs.DriveConnectedHandler DriveConnected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive_connected", typeof (Gnome.Vfs.DriveConnectedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive_connected", typeof (Gnome.Vfs.DriveConnectedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void VolumeMountedVMDelegate (IntPtr volume_monitor, IntPtr volume);

		static VolumeMountedVMDelegate VolumeMountedVMCallback;

		static void volumemounted_cb (IntPtr volume_monitor, IntPtr volume)
		{
			try {
				VolumeMonitor volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnVolumeMounted (GLib.Object.GetObject(volume) as Gnome.Vfs.Volume);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideVolumeMounted (GLib.GType gtype)
		{
			if (VolumeMountedVMCallback == null)
				VolumeMountedVMCallback = new VolumeMountedVMDelegate (volumemounted_cb);
			OverrideVirtualMethod (gtype, "volume_mounted", VolumeMountedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Vfs.VolumeMonitor), ConnectionMethod="OverrideVolumeMounted")]
		protected virtual void OnVolumeMounted (Gnome.Vfs.Volume volume)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (volume);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("volume_mounted")]
		public event Gnome.Vfs.VolumeMountedHandler VolumeMounted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume_mounted", typeof (Gnome.Vfs.VolumeMountedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume_mounted", typeof (Gnome.Vfs.VolumeMountedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_volume_monitor_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_vfs_volume_monitor_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_volume_monitor_get_volume_for_path(IntPtr raw, IntPtr path);

		public Gnome.Vfs.Volume GetVolumeForPath(string path) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr raw_ret = gnome_vfs_volume_monitor_get_volume_for_path(Handle, native_path);
			Gnome.Vfs.Volume ret = GLib.Object.GetObject(raw_ret) as Gnome.Vfs.Volume;
			GLib.Marshaller.Free (native_path);
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_volume_monitor_get_drive_by_id(IntPtr raw, UIntPtr id);

		public Gnome.Vfs.Drive GetDriveById(ulong id) {
			IntPtr raw_ret = gnome_vfs_volume_monitor_get_drive_by_id(Handle, new UIntPtr (id));
			Gnome.Vfs.Drive ret = GLib.Object.GetObject(raw_ret) as Gnome.Vfs.Drive;
			return ret;
		}

		[DllImport("gnomevfs-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_vfs_volume_monitor_get_volume_by_id(IntPtr raw, UIntPtr id);

		public Gnome.Vfs.Volume GetVolumeById(ulong id) {
			IntPtr raw_ret = gnome_vfs_volume_monitor_get_volume_by_id(Handle, new UIntPtr (id));
			Gnome.Vfs.Volume ret = GLib.Object.GetObject(raw_ret) as Gnome.Vfs.Volume;
			return ret;
		}


		static VolumeMonitor ()
		{
			GtkSharp.GnomeVfsSharp.ObjectManager.Initialize ();
		}
#endregion
#region Customized extensions
#line 1 "VolumeMonitor.custom"
//  VolumeMonitor.custom - VolumeMonitor class customizations.
//
//  Authors:  Jeroen Zwartepoorte  <jeroen@xs4all.nl>
//
//  Copyright (c) 2004 Jeroen Zwartepoorte
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("gnomevfs-2")]
		static extern IntPtr gnome_vfs_volume_monitor_get_connected_drives(IntPtr raw);

		public Drive[] ConnectedDrives { 
			get {
				IntPtr raw_ret = gnome_vfs_volume_monitor_get_connected_drives(Handle);
				GLib.List list = new GLib.List(raw_ret);
 				Drive[] result = new Drive [list.Count];
				for (int i = 0; i < list.Count; i++)
					result [i] = list [i] as Drive;
				list.Dispose ();
				return result;
			}
		}

		[DllImport("gnomevfs-2")]
		static extern IntPtr gnome_vfs_volume_monitor_get_mounted_volumes(IntPtr raw);

		public Volume[] MountedVolumes { 
			get {
				IntPtr raw_ret = gnome_vfs_volume_monitor_get_mounted_volumes(Handle);
				GLib.List list = new GLib.List(raw_ret);
 				Volume[] result = new Volume [list.Count];
				for (int i = 0; i < list.Count; i++)
					result [i] = list [i] as Volume;
				list.Dispose ();
				return result;
			}
		}

		[DllImport("gnomevfs-2")]
		static extern IntPtr gnome_vfs_get_volume_monitor ();

		public static VolumeMonitor Get ()
		{
			IntPtr raw_ret = gnome_vfs_get_volume_monitor ();
			if (raw_ret == IntPtr.Zero)
				return null;
			else
				return (VolumeMonitor) GLib.Object.GetObject (raw_ret);
		}

#endregion
	}
}
