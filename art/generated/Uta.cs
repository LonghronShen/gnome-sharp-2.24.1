// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Art {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Uta : GLib.Opaque {

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_uta_from_irect(IntPtr bbox);

		public static Art.Uta FromIrect(Art.IRect bbox) {
			IntPtr native_bbox = GLib.Marshaller.StructureToPtrAlloc (bbox);
			IntPtr raw_ret = art_uta_from_irect(native_bbox);
			Art.Uta ret = raw_ret == IntPtr.Zero ? null : (Art.Uta) GLib.Opaque.GetOpaque (raw_ret, typeof (Art.Uta), false);
			bbox = Art.IRect.New (native_bbox);
			Marshal.FreeHGlobal (native_bbox);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_uta_from_svp(IntPtr svp);

		public static Art.Uta FromSvp(Art.SVP svp) {
			IntPtr native_svp = GLib.Marshaller.StructureToPtrAlloc (svp);
			IntPtr raw_ret = art_uta_from_svp(native_svp);
			Art.Uta ret = raw_ret == IntPtr.Zero ? null : (Art.Uta) GLib.Opaque.GetOpaque (raw_ret, typeof (Art.Uta), false);
			svp = Art.SVP.New (native_svp);
			Marshal.FreeHGlobal (native_svp);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_uta_union(IntPtr raw, IntPtr uta2);

		public Art.Uta Union(Art.Uta uta2) {
			IntPtr raw_ret = art_uta_union(Handle, uta2 == null ? IntPtr.Zero : uta2.Handle);
			Art.Uta ret = raw_ret == IntPtr.Zero ? null : (Art.Uta) GLib.Opaque.GetOpaque (raw_ret, typeof (Art.Uta), false);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_uta_add_line(IntPtr raw, double x0, double y0, double x1, double y1, out int rbuf, int rbuf_rowstride);

		public int AddLine(double x0, double y0, double x1, double y1, int rbuf_rowstride) {
			int rbuf;
			art_uta_add_line(Handle, x0, y0, x1, y1, out rbuf, rbuf_rowstride);
			return rbuf;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_uta_from_vpath(IntPtr vec);

		public static Art.Uta FromVpath(Art.Vpath vec) {
			IntPtr raw_ret = art_uta_from_vpath(vec == null ? IntPtr.Zero : vec.Handle);
			Art.Uta ret = raw_ret == IntPtr.Zero ? null : (Art.Uta) GLib.Opaque.GetOpaque (raw_ret, typeof (Art.Uta), false);
			return ret;
		}

		public Uta(IntPtr raw) : base(raw) {}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_uta_new(int x0, int y0, int x1, int y1);

		public Uta (int x0, int y0, int x1, int y1) 
		{
			Raw = art_uta_new(x0, y0, x1, y1);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_uta_new_coords(int x0, int y0, int x1, int y1);

		public static Uta NewCoords(int x0, int y0, int x1, int y1)
		{
			Uta result = new Uta (art_uta_new_coords(x0, y0, x1, y1));
			return result;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_uta_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			art_uta_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				art_uta_free (handle);
				return false;
			}
		}

		~Uta ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
