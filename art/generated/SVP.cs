// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Art {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct SVP {

		public int NSegs;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=1)]
		public Art.SVPSeg[] Segs;

		public static Art.SVP Zero = new Art.SVP ();

		public static Art.SVP New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Art.SVP.Zero;
			return (Art.SVP) Marshal.PtrToStructure (raw, typeof (Art.SVP));
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern int art_svp_point_wind(IntPtr raw, double x, double y);

		public int PointWind(double x, double y) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			int raw_ret = art_svp_point_wind(this_as_native, x, y);
			int ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_svp_uncross(IntPtr raw);

		public Art.SVP Uncross() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr raw_ret = art_svp_uncross(this_as_native);
			Art.SVP ret = Art.SVP.New (raw_ret);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern double art_svp_point_dist(IntPtr raw, double x, double y);

		public double PointDist(double x, double y) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			double raw_ret = art_svp_point_dist(this_as_native, x, y);
			double ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_svp_minus(IntPtr raw, IntPtr svp2);

		public Art.SVP Minus(Art.SVP svp2) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_svp2 = GLib.Marshaller.StructureToPtrAlloc (svp2);
			IntPtr raw_ret = art_svp_minus(this_as_native, native_svp2);
			Art.SVP ret = Art.SVP.New (raw_ret);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			svp2 = Art.SVP.New (native_svp2);
			Marshal.FreeHGlobal (native_svp2);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_svp_from_vpath(IntPtr vpath);

		public static Art.SVP FromVpath(Art.Vpath vpath) {
			IntPtr raw_ret = art_svp_from_vpath(vpath == null ? IntPtr.Zero : vpath.Handle);
			Art.SVP ret = Art.SVP.New (raw_ret);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_svp_union(IntPtr raw, IntPtr svp2);

		public Art.SVP Union(Art.SVP svp2) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_svp2 = GLib.Marshaller.StructureToPtrAlloc (svp2);
			IntPtr raw_ret = art_svp_union(this_as_native, native_svp2);
			Art.SVP ret = Art.SVP.New (raw_ret);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			svp2 = Art.SVP.New (native_svp2);
			Marshal.FreeHGlobal (native_svp2);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_svp_intersect(IntPtr raw, IntPtr svp2);

		public Art.SVP Intersect(Art.SVP svp2) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_svp2 = GLib.Marshaller.StructureToPtrAlloc (svp2);
			IntPtr raw_ret = art_svp_intersect(this_as_native, native_svp2);
			Art.SVP ret = Art.SVP.New (raw_ret);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			svp2 = Art.SVP.New (native_svp2);
			Marshal.FreeHGlobal (native_svp2);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_svp_diff(IntPtr raw, IntPtr svp2);

		public Art.SVP Diff(Art.SVP svp2) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_svp2 = GLib.Marshaller.StructureToPtrAlloc (svp2);
			IntPtr raw_ret = art_svp_diff(this_as_native, native_svp2);
			Art.SVP ret = Art.SVP.New (raw_ret);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			svp2 = Art.SVP.New (native_svp2);
			Marshal.FreeHGlobal (native_svp2);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_svp_render_aa_iter(IntPtr raw, int x0, int y0, int x1, int y1);

		public Art.SVPRenderAAIter RenderAaIter(int x0, int y0, int x1, int y1) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr raw_ret = art_svp_render_aa_iter(this_as_native, x0, y0, x1, y1);
			Art.SVPRenderAAIter ret = raw_ret == IntPtr.Zero ? null : (Art.SVPRenderAAIter) GLib.Opaque.GetOpaque (raw_ret, typeof (Art.SVPRenderAAIter), false);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_svp_intersector(IntPtr raw, IntPtr out_param);

		public void Intersector(Art.SvpWriter out_param) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_out_param = GLib.Marshaller.StructureToPtrAlloc (out_param);
			art_svp_intersector(this_as_native, native_out_param);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			out_param = Art.SvpWriter.New (native_out_param);
			Marshal.FreeHGlobal (native_out_param);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_svp_free(IntPtr raw);

		public void Free() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			art_svp_free(this_as_native);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_svp_vpath_stroke_raw(IntPtr vpath, int join, int cap, double line_width, double miter_limit, double flatness);

		public static Art.Vpath VpathStrokeRaw(Art.Vpath vpath, Art.PathStrokeJoinType join, Art.PathStrokeCapType cap, double line_width, double miter_limit, double flatness) {
			IntPtr raw_ret = art_svp_vpath_stroke_raw(vpath == null ? IntPtr.Zero : vpath.Handle, (int) join, (int) cap, line_width, miter_limit, flatness);
			Art.Vpath ret = raw_ret == IntPtr.Zero ? null : (Art.Vpath) GLib.Opaque.GetOpaque (raw_ret, typeof (Art.Vpath), false);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_svp_rewind_uncrossed(IntPtr raw, int rule);

		public Art.SVP RewindUncrossed(Art.WindRule rule) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr raw_ret = art_svp_rewind_uncrossed(this_as_native, (int) rule);
			Art.SVP ret = Art.SVP.New (raw_ret);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern int art_svp_add_segment(IntPtr raw, out int pn_segs_max, out int pn_points_max, int n_points, int dir, IntPtr points, IntPtr bbox);

		public int AddSegment(out int pn_segs_max, out int pn_points_max, int n_points, int dir, Art.Point points, Art.DRect bbox) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_points = GLib.Marshaller.StructureToPtrAlloc (points);
			IntPtr native_bbox = GLib.Marshaller.StructureToPtrAlloc (bbox);
			int raw_ret = art_svp_add_segment(this_as_native, out pn_segs_max, out pn_points_max, n_points, dir, native_points, native_bbox);
			int ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			points = Art.Point.New (native_points);
			Marshal.FreeHGlobal (native_points);
			bbox = Art.DRect.New (native_bbox);
			Marshal.FreeHGlobal (native_bbox);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_svp_vpath_stroke(IntPtr vpath, int join, int cap, double line_width, double miter_limit, double flatness);

		public static Art.SVP VpathStroke(Art.Vpath vpath, Art.PathStrokeJoinType join, Art.PathStrokeCapType cap, double line_width, double miter_limit, double flatness) {
			IntPtr raw_ret = art_svp_vpath_stroke(vpath == null ? IntPtr.Zero : vpath.Handle, (int) join, (int) cap, line_width, miter_limit, flatness);
			Art.SVP ret = Art.SVP.New (raw_ret);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_svp_render_aa(IntPtr raw, int x0, int y0, int x1, int y1, ArtSharp.RenderAaCallbackNative cb, IntPtr callback_data);

		public void RenderAa(int x0, int y0, int x1, int y1, Art.RenderAaCallback cb) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			ArtSharp.RenderAaCallbackWrapper cb_wrapper = new ArtSharp.RenderAaCallbackWrapper (cb);
			art_svp_render_aa(this_as_native, x0, y0, x1, y1, cb_wrapper.NativeDelegate, IntPtr.Zero);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
		}

		static void ReadNative (IntPtr native, ref Art.SVP target)
		{
			target = New (native);
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
