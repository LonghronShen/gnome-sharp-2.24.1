// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Art {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct DRect {

		public double X0;
		public double Y0;
		public double X1;
		public double Y1;

		public static Art.DRect Zero = new Art.DRect ();

		public static Art.DRect New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Art.DRect.Zero;
			return (Art.DRect) Marshal.PtrToStructure (raw, typeof (Art.DRect));
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_drect_svp(IntPtr raw, IntPtr svp);

		public void Svp(Art.SVP svp) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_svp = GLib.Marshaller.StructureToPtrAlloc (svp);
			art_drect_svp(this_as_native, native_svp);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			svp = Art.SVP.New (native_svp);
			Marshal.FreeHGlobal (native_svp);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_drect_svp_union(IntPtr raw, IntPtr svp);

		public void SvpUnion(Art.SVP svp) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_svp = GLib.Marshaller.StructureToPtrAlloc (svp);
			art_drect_svp_union(this_as_native, native_svp);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			svp = Art.SVP.New (native_svp);
			Marshal.FreeHGlobal (native_svp);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_drect_copy(IntPtr raw, IntPtr src);

		public void Copy(Art.DRect src) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_src = GLib.Marshaller.StructureToPtrAlloc (src);
			art_drect_copy(this_as_native, native_src);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			src = Art.DRect.New (native_src);
			Marshal.FreeHGlobal (native_src);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern int art_drect_empty(IntPtr raw);

		public int Empty() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			int raw_ret = art_drect_empty(this_as_native);
			int ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_drect_union(IntPtr raw, IntPtr src1, IntPtr src2);

		public void Union(Art.DRect src1, Art.DRect src2) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_src1 = GLib.Marshaller.StructureToPtrAlloc (src1);
			IntPtr native_src2 = GLib.Marshaller.StructureToPtrAlloc (src2);
			art_drect_union(this_as_native, native_src1, native_src2);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			src1 = Art.DRect.New (native_src1);
			Marshal.FreeHGlobal (native_src1);
			src2 = Art.DRect.New (native_src2);
			Marshal.FreeHGlobal (native_src2);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_drect_affine_transform(IntPtr raw, IntPtr src, double[] matrix);

		public void AffineTransform(Art.DRect src, double[] matrix) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_src = GLib.Marshaller.StructureToPtrAlloc (src);
			art_drect_affine_transform(this_as_native, native_src, matrix);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			src = Art.DRect.New (native_src);
			Marshal.FreeHGlobal (native_src);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_drect_to_irect(IntPtr dst, IntPtr src);

		public static void ToIrect(Art.IRect dst, Art.DRect src) {
			IntPtr native_dst = GLib.Marshaller.StructureToPtrAlloc (dst);
			IntPtr native_src = GLib.Marshaller.StructureToPtrAlloc (src);
			art_drect_to_irect(native_dst, native_src);
			dst = Art.IRect.New (native_dst);
			Marshal.FreeHGlobal (native_dst);
			src = Art.DRect.New (native_src);
			Marshal.FreeHGlobal (native_src);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_drect_intersect(IntPtr raw, IntPtr src1, IntPtr src2);

		public void Intersect(Art.DRect src1, Art.DRect src2) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr native_src1 = GLib.Marshaller.StructureToPtrAlloc (src1);
			IntPtr native_src2 = GLib.Marshaller.StructureToPtrAlloc (src2);
			art_drect_intersect(this_as_native, native_src1, native_src2);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			src1 = Art.DRect.New (native_src1);
			Marshal.FreeHGlobal (native_src1);
			src2 = Art.DRect.New (native_src2);
			Marshal.FreeHGlobal (native_src2);
		}

		static void ReadNative (IntPtr native, ref Art.DRect target)
		{
			target = New (native);
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
