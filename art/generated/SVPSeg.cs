// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Art {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct SVPSeg {

		public int NPoints;
		public int Dir;
		public Art.DRect Bbox;
		private IntPtr _points;

		public Art.Point points {
			get { return Art.Point.New (_points); }
		}

		public static Art.SVPSeg Zero = new Art.SVPSeg ();

		public static Art.SVPSeg New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Art.SVPSeg.Zero;
			return (Art.SVPSeg) Marshal.PtrToStructure (raw, typeof (Art.SVPSeg));
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern int art_svp_seg_compare(IntPtr s1, IntPtr s2);

		public static int Compare(IntPtr s1, IntPtr s2) {
			int raw_ret = art_svp_seg_compare(s1, s2);
			int ret = raw_ret;
			return ret;
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
