// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Art {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class PixBuf : GLib.Opaque {

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_pixbuf_duplicate(IntPtr raw);

		public Art.PixBuf Duplicate() {
			IntPtr raw_ret = art_pixbuf_duplicate(Handle);
			Art.PixBuf ret = raw_ret == IntPtr.Zero ? null : (Art.PixBuf) GLib.Opaque.GetOpaque (raw_ret, typeof (Art.PixBuf), false);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_pixbuf_free_shallow(IntPtr raw);

		public void FreeShallow() {
			art_pixbuf_free_shallow(Handle);
		}

		public PixBuf(IntPtr raw) : base(raw) {}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_pixbuf_new_const_rgb(out byte pixels, int width, int height, int rowstride);

		public PixBuf (out byte pixels, int width, int height, int rowstride) 
		{
			Raw = art_pixbuf_new_const_rgb(out pixels, width, height, rowstride);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_pixbuf_new_const_rgba(out byte pixels, int width, int height, int rowstride);

		public static PixBuf NewConstRgba(out byte pixels, int width, int height, int rowstride)
		{
			PixBuf result = new PixBuf (art_pixbuf_new_const_rgba(out pixels, width, height, rowstride));
			return result;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_pixbuf_new_rgb(out byte pixels, int width, int height, int rowstride);

		public static PixBuf NewRgb(out byte pixels, int width, int height, int rowstride)
		{
			PixBuf result = new PixBuf (art_pixbuf_new_rgb(out pixels, width, height, rowstride));
			return result;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_pixbuf_new_rgb_dnotify(out byte pixels, int width, int height, int rowstride, IntPtr dfunc_data, ArtSharp.DestroyNotifyNative dfunc);

		public PixBuf (out byte pixels, int width, int height, int rowstride, IntPtr dfunc_data, Art.DestroyNotify dfunc) 
		{
			ArtSharp.DestroyNotifyWrapper dfunc_wrapper = new ArtSharp.DestroyNotifyWrapper (dfunc);
			Raw = art_pixbuf_new_rgb_dnotify(out pixels, width, height, rowstride, dfunc_data, dfunc_wrapper.NativeDelegate);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_pixbuf_new_rgba(out byte pixels, int width, int height, int rowstride);

		public static PixBuf NewRgba(out byte pixels, int width, int height, int rowstride)
		{
			PixBuf result = new PixBuf (art_pixbuf_new_rgba(out pixels, width, height, rowstride));
			return result;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_pixbuf_new_rgba_dnotify(out byte pixels, int width, int height, int rowstride, IntPtr dfunc_data, ArtSharp.DestroyNotifyNative dfunc);

		public static PixBuf NewRgbaDnotify(out byte pixels, int width, int height, int rowstride, IntPtr dfunc_data, Art.DestroyNotify dfunc)
		{
			ArtSharp.DestroyNotifyWrapper dfunc_wrapper = new ArtSharp.DestroyNotifyWrapper (dfunc);
			PixBuf result = new PixBuf (art_pixbuf_new_rgba_dnotify(out pixels, width, height, rowstride, dfunc_data, dfunc_wrapper.NativeDelegate));
			return result;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_pixbuf_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			art_pixbuf_free (raw);
		}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				art_pixbuf_free (handle);
				return false;
			}
		}

		~PixBuf ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
