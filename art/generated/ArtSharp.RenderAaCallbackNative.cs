// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace ArtSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate void RenderAaCallbackNative(IntPtr callback_data, int y, int start, IntPtr steps, int n_steps);

	internal class RenderAaCallbackInvoker {

		RenderAaCallbackNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~RenderAaCallbackInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal RenderAaCallbackInvoker (RenderAaCallbackNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal RenderAaCallbackInvoker (RenderAaCallbackNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal RenderAaCallbackInvoker (RenderAaCallbackNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Art.RenderAaCallback Handler {
			get {
				return new Art.RenderAaCallback(InvokeNative);
			}
		}

		void InvokeNative (IntPtr callback_data, int y, int start, Art.SVPRenderAAStep steps, int n_steps)
		{
			IntPtr native_steps = GLib.Marshaller.StructureToPtrAlloc (steps);
			native_cb (__data, y, start, native_steps, n_steps);
			steps = Art.SVPRenderAAStep.New (native_steps);
			Marshal.FreeHGlobal (native_steps);
		}
	}

	internal class RenderAaCallbackWrapper {

		public void NativeCallback (IntPtr callback_data, int y, int start, IntPtr steps, int n_steps)
		{
			try {
				managed (callback_data, y, start, Art.SVPRenderAAStep.New (steps), n_steps);
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal RenderAaCallbackNative NativeDelegate;
		Art.RenderAaCallback managed;

		public RenderAaCallbackWrapper (Art.RenderAaCallback managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new RenderAaCallbackNative (NativeCallback);
		}

		public static Art.RenderAaCallback GetManagedDelegate (RenderAaCallbackNative native)
		{
			if (native == null)
				return null;
			RenderAaCallbackWrapper wrapper = (RenderAaCallbackWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
