// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Art {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct Bpath {

		public Art.Pathcode Code;
		public double X1;
		public double Y1;
		public double X2;
		public double Y2;
		public double X3;
		public double Y3;

		public static Art.Bpath Zero = new Art.Bpath ();

		public static Art.Bpath New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Art.Bpath.Zero;
			return (Art.Bpath) Marshal.PtrToStructure (raw, typeof (Art.Bpath));
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_bpath_affine_transform(IntPtr raw, double[] matrix);

		public Art.Bpath AffineTransform(double[] matrix) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr raw_ret = art_bpath_affine_transform(this_as_native, matrix);
			Art.Bpath ret = Art.Bpath.New (raw_ret);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		static void ReadNative (IntPtr native, ref Art.Bpath target)
		{
			target = New (native);
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
