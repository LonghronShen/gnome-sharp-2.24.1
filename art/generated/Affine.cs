// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Art {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Affine {

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_affine_rotate(double[] dst, double theta);

		public static void Rotate(double[] dst, double theta) {
			art_affine_rotate(dst, theta);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_affine_to_string(IntPtr[] str, double[] src);

		public static void ToString(string[] str, double[] src) {
			int cnt_str = str == null ? 0 : str.Length;
			IntPtr[] native_str = new IntPtr [cnt_str];
			for (int i = 0; i < cnt_str; i++)
				native_str [i] = GLib.Marshaller.StringToPtrGStrdup(str[i]);
			art_affine_to_string(native_str, src);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern double art_affine_expansion(double[] src);

		public static double Expansion(double[] src) {
			double raw_ret = art_affine_expansion(src);
			double ret = raw_ret;
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_affine_identity(double[] dst);

		public static void Identity(double[] dst) {
			art_affine_identity(dst);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_affine_flip(double[] dst_affine, double[] src_affine, int horz, int vert);

		public static void Flip(double[] dst_affine, double[] src_affine, int horz, int vert) {
			art_affine_flip(dst_affine, src_affine, horz, vert);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_affine_invert(double[] dst_affine, double[] src_affine);

		public static void Invert(double[] dst_affine, double[] src_affine) {
			art_affine_invert(dst_affine, src_affine);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_affine_point(IntPtr dst, IntPtr src, double[] affine);

		public static void Point(Art.Point dst, Art.Point src, double[] affine) {
			IntPtr native_dst = GLib.Marshaller.StructureToPtrAlloc (dst);
			IntPtr native_src = GLib.Marshaller.StructureToPtrAlloc (src);
			art_affine_point(native_dst, native_src, affine);
			dst = Art.Point.New (native_dst);
			Marshal.FreeHGlobal (native_dst);
			src = Art.Point.New (native_src);
			Marshal.FreeHGlobal (native_src);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_affine_multiply(double[] dst, double[] src1, double[] src2);

		public static void Multiply(double[] dst, double[] src1, double[] src2) {
			art_affine_multiply(dst, src1, src2);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_affine_shear(double[] dst, double theta);

		public static void Shear(double[] dst, double theta) {
			art_affine_shear(dst, theta);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern int art_affine_rectilinear(double[] src);

		public static int Rectilinear(double[] src) {
			int raw_ret = art_affine_rectilinear(src);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern int art_affine_equal(double[] matrix1, double[] matrix2);

		public static int Equal(double[] matrix1, double[] matrix2) {
			int raw_ret = art_affine_equal(matrix1, matrix2);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_affine_translate(double[] dst, double tx, double ty);

		public static void Translate(double[] dst, double tx, double ty) {
			art_affine_translate(dst, tx, ty);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_affine_scale(double[] dst, double sx, double sy);

		public static void Scale(double[] dst, double sx, double sy) {
			art_affine_scale(dst, sx, sy);
		}

#endregion
	}
}
