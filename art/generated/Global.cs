// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Art {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Global {

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_bezier_to_vec(double x0, double y0, double x1, double y1, double x2, double y2, double x3, double y3, IntPtr p, int level);

		public static Art.Point BezierToVec(double x0, double y0, double x1, double y1, double x2, double y2, double x3, double y3, Art.Point p, int level) {
			IntPtr native_p = GLib.Marshaller.StructureToPtrAlloc (p);
			IntPtr raw_ret = art_bezier_to_vec(x0, y0, x1, y1, x2, y2, x3, y3, native_p, level);
			Art.Point ret = Art.Point.New (raw_ret);
			p = Art.Point.New (native_p);
			Marshal.FreeHGlobal (native_p);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_rect_list_from_uta(IntPtr uta, int max_width, int max_height, out int p_nrects);

		public static Art.IRect RectListFromUta(Art.Uta uta, int max_width, int max_height, out int p_nrects) {
			IntPtr raw_ret = art_rect_list_from_uta(uta == null ? IntPtr.Zero : uta.Handle, max_width, max_height, out p_nrects);
			Art.IRect ret = Art.IRect.New (raw_ret);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_bez_path_to_vec(IntPtr bez, double flatness);

		public static Art.Vpath BezPathToVec(Art.Bpath bez, double flatness) {
			IntPtr native_bez = GLib.Marshaller.StructureToPtrAlloc (bez);
			IntPtr raw_ret = art_bez_path_to_vec(native_bez, flatness);
			Art.Vpath ret = raw_ret == IntPtr.Zero ? null : (Art.Vpath) GLib.Opaque.GetOpaque (raw_ret, typeof (Art.Vpath), false);
			bez = Art.Bpath.New (native_bez);
			Marshal.FreeHGlobal (native_bez);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_gray_svp_aa(IntPtr svp, int x0, int y0, int x1, int y1, out byte buf, int rowstride);

		public static byte GraySvpAa(Art.SVP svp, int x0, int y0, int x1, int y1, int rowstride) {
			byte buf;
			IntPtr native_svp = GLib.Marshaller.StructureToPtrAlloc (svp);
			art_gray_svp_aa(native_svp, x0, y0, x1, y1, out buf, rowstride);
			svp = Art.SVP.New (native_svp);
			Marshal.FreeHGlobal (native_svp);
			return buf;
		}

#endregion
	}
}
