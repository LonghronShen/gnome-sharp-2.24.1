// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Art {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct SvpWriter {


		public static Art.SvpWriter Zero = new Art.SvpWriter ();

		public static Art.SvpWriter New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Art.SvpWriter.Zero;
			return (Art.SvpWriter) Marshal.PtrToStructure (raw, typeof (Art.SvpWriter));
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_svp_writer_rewind_reap(IntPtr raw);

		public Art.SVP RewindReap() {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			IntPtr raw_ret = art_svp_writer_rewind_reap(this_as_native);
			Art.SVP ret = Art.SVP.New (raw_ret);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr art_svp_writer_rewind_new(int rule);

		public static Art.SvpWriter RewindNew(Art.WindRule rule) {
			IntPtr raw_ret = art_svp_writer_rewind_new((int) rule);
			Art.SvpWriter ret = Art.SvpWriter.New (raw_ret);
			return ret;
		}

		static void ReadNative (IntPtr native, ref Art.SvpWriter target)
		{
			target = New (native);
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
