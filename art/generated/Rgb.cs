// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Art {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Rgb {

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_rgb_a_affine(out byte dst, int x0, int y0, int x1, int y1, int dst_rowstride, out byte src, int src_width, int src_height, int src_rowstride, uint rgb, double[] affine, int level, IntPtr alphagamma);

		public static void AAffine(out byte dst, int x0, int y0, int x1, int y1, int dst_rowstride, out byte src, int src_width, int src_height, int src_rowstride, uint rgb, double[] affine, Art.FilterLevel level, Art.AlphaGamma alphagamma) {
			art_rgb_a_affine(out dst, x0, y0, x1, y1, dst_rowstride, out src, src_width, src_height, src_rowstride, rgb, affine, (int) level, alphagamma == null ? IntPtr.Zero : alphagamma.Handle);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_rgb_run_alpha(out byte buf, byte r, byte g, byte b, int alpha, int n);

		public static byte RunAlpha(byte r, byte g, byte b, int alpha, int n) {
			byte buf;
			art_rgb_run_alpha(out buf, r, g, b, alpha, n);
			return buf;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_rgb_svp_alpha(IntPtr svp, int x0, int y0, int x1, int y1, uint rgba, out byte buf, int rowstride, IntPtr alphagamma);

		public static byte SvpAlpha(Art.SVP svp, int x0, int y0, int x1, int y1, uint rgba, int rowstride, Art.AlphaGamma alphagamma) {
			byte buf;
			IntPtr native_svp = GLib.Marshaller.StructureToPtrAlloc (svp);
			art_rgb_svp_alpha(native_svp, x0, y0, x1, y1, rgba, out buf, rowstride, alphagamma == null ? IntPtr.Zero : alphagamma.Handle);
			svp = Art.SVP.New (native_svp);
			Marshal.FreeHGlobal (native_svp);
			return buf;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_rgb_svp_aa(IntPtr svp, int x0, int y0, int x1, int y1, uint fg_color, uint bg_color, out byte buf, int rowstride, IntPtr alphagamma);

		public static byte SvpAa(Art.SVP svp, int x0, int y0, int x1, int y1, uint fg_color, uint bg_color, int rowstride, Art.AlphaGamma alphagamma) {
			byte buf;
			IntPtr native_svp = GLib.Marshaller.StructureToPtrAlloc (svp);
			art_rgb_svp_aa(native_svp, x0, y0, x1, y1, fg_color, bg_color, out buf, rowstride, alphagamma == null ? IntPtr.Zero : alphagamma.Handle);
			svp = Art.SVP.New (native_svp);
			Marshal.FreeHGlobal (native_svp);
			return buf;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_rgb_fill_run(out byte buf, byte r, byte g, byte b, int n);

		public static byte FillRun(byte r, byte g, byte b, int n) {
			byte buf;
			art_rgb_fill_run(out buf, r, g, b, n);
			return buf;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_rgb_pixbuf_affine(out byte dst, int x0, int y0, int x1, int y1, int dst_rowstride, IntPtr pixbuf, double[] affine, int level, IntPtr alphagamma);

		public static byte PixbufAffine(int x0, int y0, int x1, int y1, int dst_rowstride, Art.PixBuf pixbuf, double[] affine, Art.FilterLevel level, Art.AlphaGamma alphagamma) {
			byte dst;
			art_rgb_pixbuf_affine(out dst, x0, y0, x1, y1, dst_rowstride, pixbuf == null ? IntPtr.Zero : pixbuf.Handle, affine, (int) level, alphagamma == null ? IntPtr.Zero : alphagamma.Handle);
			return dst;
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_rgb_bitmap_affine(out byte dst, int x0, int y0, int x1, int y1, int dst_rowstride, out byte src, int src_width, int src_height, int src_rowstride, uint rgba, double[] affine, int level, IntPtr alphagamma);

		public static void BitmapAffine(out byte dst, int x0, int y0, int x1, int y1, int dst_rowstride, out byte src, int src_width, int src_height, int src_rowstride, uint rgba, double[] affine, Art.FilterLevel level, Art.AlphaGamma alphagamma) {
			art_rgb_bitmap_affine(out dst, x0, y0, x1, y1, dst_rowstride, out src, src_width, src_height, src_rowstride, rgba, affine, (int) level, alphagamma == null ? IntPtr.Zero : alphagamma.Handle);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_rgb_affine(out byte dst, int x0, int y0, int x1, int y1, int dst_rowstride, out byte src, int src_width, int src_height, int src_rowstride, double[] affine, int level, IntPtr alphagamma);

		public static void Affine(out byte dst, int x0, int y0, int x1, int y1, int dst_rowstride, out byte src, int src_width, int src_height, int src_rowstride, double[] affine, Art.FilterLevel level, Art.AlphaGamma alphagamma) {
			art_rgb_affine(out dst, x0, y0, x1, y1, dst_rowstride, out src, src_width, src_height, src_rowstride, affine, (int) level, alphagamma == null ? IntPtr.Zero : alphagamma.Handle);
		}

		[DllImport("art_lgpl", CallingConvention = CallingConvention.Cdecl)]
		static extern void art_rgb_rgba_affine(out byte dst, int x0, int y0, int x1, int y1, int dst_rowstride, out byte src, int src_width, int src_height, int src_rowstride, double[] affine, int level, IntPtr alphagamma);

		public static void RgbaAffine(out byte dst, int x0, int y0, int x1, int y1, int dst_rowstride, out byte src, int src_width, int src_height, int src_rowstride, double[] affine, Art.FilterLevel level, Art.AlphaGamma alphagamma) {
			art_rgb_rgba_affine(out dst, x0, y0, x1, y1, dst_rowstride, out src, src_width, src_height, src_rowstride, affine, (int) level, alphagamma == null ? IntPtr.Zero : alphagamma.Handle);
		}

#endregion
	}
}
