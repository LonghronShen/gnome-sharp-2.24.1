// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class CanvasRichText : Gnome.CanvasItem {

		[Obsolete]
		protected CanvasRichText(GLib.GType gtype) : base(gtype) {}
		public CanvasRichText(IntPtr raw) : base(raw) {}

		protected CanvasRichText() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("pixels_inside_wrap")]
		public int PixelsInsideWrap {
			get {
				GLib.Value val = GetProperty ("pixels_inside_wrap");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("pixels_inside_wrap", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("pixels_below_lines")]
		public int PixelsBelowLines {
			get {
				GLib.Value val = GetProperty ("pixels_below_lines");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("pixels_below_lines", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("cursor_blink")]
		public bool CursorBlink {
			get {
				GLib.Value val = GetProperty ("cursor_blink");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("cursor_blink", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("right_margin")]
		public int RightMargin {
			get {
				GLib.Value val = GetProperty ("right_margin");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("right_margin", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("editable")]
		public bool Editable {
			get {
				GLib.Value val = GetProperty ("editable");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("editable", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("indent")]
		public int Indent {
			get {
				GLib.Value val = GetProperty ("indent");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("indent", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("justification")]
		public Gtk.Justification Justification {
			get {
				GLib.Value val = GetProperty ("justification");
				Gtk.Justification ret = (Gtk.Justification) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("justification", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("x")]
		public double X {
			get {
				GLib.Value val = GetProperty ("x");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("x", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("y")]
		public double Y {
			get {
				GLib.Value val = GetProperty ("y");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("y", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("pixels_above_lines")]
		public int PixelsAboveLines {
			get {
				GLib.Value val = GetProperty ("pixels_above_lines");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("pixels_above_lines", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("direction")]
		public Gtk.DirectionType Direction {
			get {
				GLib.Value val = GetProperty ("direction");
				Gtk.DirectionType ret = (Gtk.DirectionType) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("direction", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("text")]
		public string Text {
			get {
				GLib.Value val = GetProperty ("text");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("text", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("width")]
		public double Width {
			get {
				GLib.Value val = GetProperty ("width");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("width", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("left_margin")]
		public int LeftMargin {
			get {
				GLib.Value val = GetProperty ("left_margin");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("left_margin", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("anchor")]
		public Gtk.AnchorType Anchor {
			get {
				GLib.Value val = GetProperty ("anchor");
				Gtk.AnchorType ret = (Gtk.AnchorType) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("anchor", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("wrap_mode")]
		public Gtk.WrapMode WrapMode {
			get {
				GLib.Value val = GetProperty ("wrap_mode");
				Gtk.WrapMode ret = (Gtk.WrapMode) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("wrap_mode", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("height")]
		public double Height {
			get {
				GLib.Value val = GetProperty ("height");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("height", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("grow_height")]
		public bool GrowHeight {
			get {
				GLib.Value val = GetProperty ("grow_height");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("grow_height", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("visible")]
		public bool Visible {
			get {
				GLib.Value val = GetProperty ("visible");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("visible", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("cursor_visible")]
		public bool CursorVisible {
			get {
				GLib.Value val = GetProperty ("cursor_visible");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("cursor_visible", val);
				val.Dispose ();
			}
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_rich_text_copy_clipboard(IntPtr raw);

		public void CopyClipboard() {
			gnome_canvas_rich_text_copy_clipboard(Handle);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_rich_text_get_buffer(IntPtr raw);

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_rich_text_set_buffer(IntPtr raw, IntPtr buffer);

		public Gtk.TextBuffer Buffer { 
			get {
				IntPtr raw_ret = gnome_canvas_rich_text_get_buffer(Handle);
				Gtk.TextBuffer ret = GLib.Object.GetObject(raw_ret) as Gtk.TextBuffer;
				return ret;
			}
			set {
				gnome_canvas_rich_text_set_buffer(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_rich_text_cut_clipboard(IntPtr raw);

		public void CutClipboard() {
			gnome_canvas_rich_text_cut_clipboard(Handle);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_rich_text_get_iter_location(IntPtr raw, IntPtr iter, IntPtr location);

		public Gdk.Rectangle GetIterLocation(Gtk.TextIter iter) {
			Gdk.Rectangle location;
			IntPtr native_iter = GLib.Marshaller.StructureToPtrAlloc (iter);
			IntPtr native_location = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gdk.Rectangle)));
			gnome_canvas_rich_text_get_iter_location(Handle, native_iter, native_location);
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			location = Gdk.Rectangle.New (native_location);
			Marshal.FreeHGlobal (native_location);
			return location;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_rich_text_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_canvas_rich_text_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_rich_text_get_iter_at_location(IntPtr raw, IntPtr iter, int x, int y);

		public Gtk.TextIter GetIterAtLocation(int x, int y) {
			Gtk.TextIter iter;
			IntPtr native_iter = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gtk.TextIter)));
			gnome_canvas_rich_text_get_iter_at_location(Handle, native_iter, x, y);
			iter = Gtk.TextIter.New (native_iter);
			Marshal.FreeHGlobal (native_iter);
			return iter;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_rich_text_paste_clipboard(IntPtr raw);

		public void PasteClipboard() {
			gnome_canvas_rich_text_paste_clipboard(Handle);
		}

#endregion
#region Customized extensions
#line 1 "CanvasRichText.custom"
//
// Gnome.CanvasRichText.custom - Gnome CanvasRichText class customizations
//
// Author: Rachel Hestilow <hestilow@ximian.com>
//
// Copyright (C) 2002 Rachel Hestilow
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.
	
	
public CanvasRichText (Gnome.CanvasGroup group) : base (group, GType)
{
}


#endregion
	}
}
