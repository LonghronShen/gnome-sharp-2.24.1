// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Obsolete]
	public class DruidPageEdge : Gnome.DruidPage {

		[Obsolete]
		protected DruidPageEdge(GLib.GType gtype) : base(gtype) {}
		public DruidPageEdge(IntPtr raw) : base(raw) {}

		protected DruidPageEdge() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_druidpageedge_get_top_watermark_image_offset ();

		static uint top_watermark_image_offset = gnomesharp_gnome_druidpageedge_get_top_watermark_image_offset ();
		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_druid_page_edge_set_top_watermark(IntPtr raw, IntPtr top_watermark_image);

		public Gdk.Pixbuf TopWatermark {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + top_watermark_image_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gdk.Pixbuf;
				}
			}
			set  {
				gnome_druid_page_edge_set_top_watermark(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_druidpageedge_get_title_offset ();

		static uint title_offset = gnomesharp_gnome_druidpageedge_get_title_offset ();
		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_druid_page_edge_set_title(IntPtr raw, IntPtr title);

		public string Title {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + title_offset);
					return GLib.Marshaller.Utf8PtrToString ((*raw_ptr));
				}
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_druid_page_edge_set_title(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_druidpageedge_get_textbox_color_offset ();

		static uint textbox_color_offset = gnomesharp_gnome_druidpageedge_get_textbox_color_offset ();
		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_druid_page_edge_set_textbox_color(IntPtr raw, IntPtr value);

		public Gdk.Color TextboxColor {
			get {
				unsafe {
					Gdk.Color* raw_ptr = (Gdk.Color*)(((byte*)Handle) + textbox_color_offset);
					return *raw_ptr;
				}
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gnome_druid_page_edge_set_textbox_color(Handle, native_value);
				value = Gdk.Color.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_druidpageedge_get_watermark_image_offset ();

		static uint watermark_image_offset = gnomesharp_gnome_druidpageedge_get_watermark_image_offset ();
		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_druid_page_edge_set_watermark(IntPtr raw, IntPtr watermark);

		public Gdk.Pixbuf Watermark {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + watermark_image_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gdk.Pixbuf;
				}
			}
			set  {
				gnome_druid_page_edge_set_watermark(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_druidpageedge_get_logo_background_color_offset ();

		static uint logo_background_color_offset = gnomesharp_gnome_druidpageedge_get_logo_background_color_offset ();
		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_druid_page_edge_set_logo_bg_color(IntPtr raw, IntPtr value);

		public Gdk.Color LogoBgColor {
			get {
				unsafe {
					Gdk.Color* raw_ptr = (Gdk.Color*)(((byte*)Handle) + logo_background_color_offset);
					return *raw_ptr;
				}
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gnome_druid_page_edge_set_logo_bg_color(Handle, native_value);
				value = Gdk.Color.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_druidpageedge_get_text_offset ();

		static uint text_offset = gnomesharp_gnome_druidpageedge_get_text_offset ();
		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_druid_page_edge_set_text(IntPtr raw, IntPtr text);

		public string Text {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + text_offset);
					return GLib.Marshaller.Utf8PtrToString ((*raw_ptr));
				}
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_druid_page_edge_set_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_druidpageedge_get_title_color_offset ();

		static uint title_color_offset = gnomesharp_gnome_druidpageedge_get_title_color_offset ();
		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_druid_page_edge_set_title_color(IntPtr raw, IntPtr value);

		public Gdk.Color TitleColor {
			get {
				unsafe {
					Gdk.Color* raw_ptr = (Gdk.Color*)(((byte*)Handle) + title_color_offset);
					return *raw_ptr;
				}
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gnome_druid_page_edge_set_title_color(Handle, native_value);
				value = Gdk.Color.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_druidpageedge_get_logo_image_offset ();

		static uint logo_image_offset = gnomesharp_gnome_druidpageedge_get_logo_image_offset ();
		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_druid_page_edge_set_logo(IntPtr raw, IntPtr logo_image);

		public Gdk.Pixbuf Logo {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + logo_image_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gdk.Pixbuf;
				}
			}
			set  {
				gnome_druid_page_edge_set_logo(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_druidpageedge_get_text_color_offset ();

		static uint text_color_offset = gnomesharp_gnome_druidpageedge_get_text_color_offset ();
		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_druid_page_edge_set_text_color(IntPtr raw, IntPtr value);

		public Gdk.Color TextColor {
			get {
				unsafe {
					Gdk.Color* raw_ptr = (Gdk.Color*)(((byte*)Handle) + text_color_offset);
					return *raw_ptr;
				}
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gnome_druid_page_edge_set_text_color(Handle, native_value);
				value = Gdk.Color.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_druidpageedge_get_position (IntPtr raw);
		public uint Position {
			get {
				uint result = gnomesharp_gnome_druidpageedge_get_position (Handle);
				return result;
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_druidpageedge_get_background_color_offset ();

		static uint background_color_offset = gnomesharp_gnome_druidpageedge_get_background_color_offset ();
		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_druid_page_edge_set_bg_color(IntPtr raw, IntPtr value);

		public Gdk.Color BgColor {
			get {
				unsafe {
					Gdk.Color* raw_ptr = (Gdk.Color*)(((byte*)Handle) + background_color_offset);
					return *raw_ptr;
				}
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gnome_druid_page_edge_set_bg_color(Handle, native_value);
				value = Gdk.Color.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_druid_page_edge_construct(IntPtr raw, int position, bool antialiased, IntPtr title, IntPtr text, IntPtr logo, IntPtr watermark, IntPtr top_watermark);

		public void Construct(Gnome.EdgePosition position, bool antialiased, string title, string text, Gdk.Pixbuf logo, Gdk.Pixbuf watermark, Gdk.Pixbuf top_watermark) {
			IntPtr native_title = GLib.Marshaller.StringToPtrGStrdup (title);
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			gnome_druid_page_edge_construct(Handle, (int) position, antialiased, native_title, native_text, logo == null ? IntPtr.Zero : logo.Handle, watermark == null ? IntPtr.Zero : watermark.Handle, top_watermark == null ? IntPtr.Zero : top_watermark.Handle);
			GLib.Marshaller.Free (native_title);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_druid_page_edge_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_druid_page_edge_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
#region Customized extensions
#line 1 "DruidPageEdge.custom"
// DruidPage.custom - Gnome.DruidPage customizations
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("gnomeui-2")]
		static extern IntPtr gnome_druid_page_edge_new_with_vals(int position, bool antialiased, IntPtr title, IntPtr text, IntPtr logo, IntPtr watermark, IntPtr top_watermark);

		public DruidPageEdge (Gnome.EdgePosition position) : this (position, false, String.Empty, String.Empty, null, null, null)
		{
		}

		public DruidPageEdge (Gnome.EdgePosition position, bool antialiased, string title, string text, Gdk.Pixbuf logo, Gdk.Pixbuf watermark, Gdk.Pixbuf top_watermark) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DruidPageEdge)) {
				CreateNativeObject (new string[0], new GLib.Value[0]);
				Construct (position, antialiased, title, text, logo, watermark, top_watermark);
				return;
			}
			IntPtr ntitle = GLib.Marshaller.StringToPtrGStrdup (title);
			IntPtr ntext = GLib.Marshaller.StringToPtrGStrdup (text);
			Raw = gnome_druid_page_edge_new_with_vals((int) position, antialiased, ntitle, ntext, (logo != null) ? logo.Handle : IntPtr.Zero, (watermark != null) ? watermark.Handle : IntPtr.Zero, (top_watermark != null) ? top_watermark.Handle : IntPtr.Zero);
			GLib.Marshaller.Free (ntitle);
			GLib.Marshaller.Free (ntext);
		}

#endregion
	}
}
