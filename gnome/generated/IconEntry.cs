// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class IconEntry : Gtk.VBox {

		[Obsolete]
		protected IconEntry(GLib.GType gtype) : base(gtype) {}
		public IconEntry(IntPtr raw) : base(raw) {}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_entry_new(IntPtr history_id, IntPtr browse_dialog_title);

		public IconEntry (string history_id, string browse_dialog_title) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (IconEntry)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("history_id");
				vals.Add (new GLib.Value (history_id));
				names.Add ("browse_dialog_title");
				vals.Add (new GLib.Value (browse_dialog_title));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_history_id = GLib.Marshaller.StringToPtrGStrdup (history_id);
			IntPtr native_browse_dialog_title = GLib.Marshaller.StringToPtrGStrdup (browse_dialog_title);
			Raw = gnome_icon_entry_new(native_history_id, native_browse_dialog_title);
			GLib.Marshaller.Free (native_history_id);
			GLib.Marshaller.Free (native_browse_dialog_title);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_entry_get_filename(IntPtr raw);

		[GLib.Property ("filename")]
		public string Filename {
			get  {
				IntPtr raw_ret = gnome_icon_entry_get_filename(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("filename", val);
				val.Dispose ();
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_entry_set_history_id(IntPtr raw, IntPtr history_id);

		[GLib.Property ("history_id")]
		public string HistoryId {
			get {
				GLib.Value val = GetProperty ("history_id");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_icon_entry_set_history_id(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Property ("pick_dialog")]
		public Gtk.Dialog PickDialog {
			get {
				GLib.Value val = GetProperty ("pick_dialog");
				Gtk.Dialog ret = (Gtk.Dialog) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_entry_set_browse_dialog_title(IntPtr raw, IntPtr browse_dialog_title);

		[GLib.Property ("browse_dialog_title")]
		public string BrowseDialogTitle {
			get {
				GLib.Value val = GetProperty ("browse_dialog_title");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_icon_entry_set_browse_dialog_title(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_entry_set_pixmap_subdir(IntPtr raw, IntPtr subdir);

		[GLib.Property ("pixmap_subdir")]
		public string PixmapSubdir {
			get {
				GLib.Value val = GetProperty ("pixmap_subdir");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_icon_entry_set_pixmap_subdir(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedVMDelegate (IntPtr ientry);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconentry_override_changed (IntPtr gtype, ChangedVMDelegate cb);

		static ChangedVMDelegate ChangedVMCallback;

		static void changed_cb (IntPtr ientry)
		{
			try {
				IconEntry ientry_managed = GLib.Object.GetObject (ientry, false) as IconEntry;
				ientry_managed.OnChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideChanged (GLib.GType gtype)
		{
			if (ChangedVMCallback == null)
				ChangedVMCallback = new ChangedVMDelegate (changed_cb);
			gnomesharp_iconentry_override_changed (gtype.Val, ChangedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconentry_base_changed (IntPtr ientry);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconEntry), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged ()
		{
			gnomesharp_iconentry_base_changed (Handle);
		}

		[GLib.Signal("changed")]
		public event System.EventHandler Changed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void BrowseVMDelegate (IntPtr ientry);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconentry_override_browse (IntPtr gtype, BrowseVMDelegate cb);

		static BrowseVMDelegate BrowseVMCallback;

		static void browse_cb (IntPtr ientry)
		{
			try {
				IconEntry ientry_managed = GLib.Object.GetObject (ientry, false) as IconEntry;
				ientry_managed.OnBrowse ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideBrowse (GLib.GType gtype)
		{
			if (BrowseVMCallback == null)
				BrowseVMCallback = new BrowseVMDelegate (browse_cb);
			gnomesharp_iconentry_override_browse (gtype.Val, BrowseVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconentry_base_browse (IntPtr ientry);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconEntry), ConnectionMethod="OverrideBrowse")]
		protected virtual void OnBrowse ()
		{
			gnomesharp_iconentry_base_browse (Handle);
		}

		[GLib.Signal("browse")]
		public event System.EventHandler Browse {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "browse");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "browse");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_entry_set_max_saved(IntPtr raw, uint max_saved);

		public uint MaxSaved { 
			set {
				gnome_icon_entry_set_max_saved(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_entry_gnome_entry(IntPtr raw);

		public Gtk.Widget GnomeEntry() {
			IntPtr raw_ret = gnome_icon_entry_gnome_entry(Handle);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_entry_gtk_entry(IntPtr raw);

		public Gtk.Widget GtkEntry() {
			IntPtr raw_ret = gnome_icon_entry_gtk_entry(Handle);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_entry_gnome_file_entry(IntPtr raw);

		public Gtk.Widget GnomeFileEntry() {
			IntPtr raw_ret = gnome_icon_entry_gnome_file_entry(Handle);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_icon_entry_set_filename(IntPtr raw, IntPtr filename);

		public bool SetFilename(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			bool raw_ret = gnome_icon_entry_set_filename(Handle, native_filename);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_entry_construct(IntPtr raw, IntPtr history_id, IntPtr browse_dialog_title);

		public void Construct(string history_id, string browse_dialog_title) {
			IntPtr native_history_id = GLib.Marshaller.StringToPtrGStrdup (history_id);
			IntPtr native_browse_dialog_title = GLib.Marshaller.StringToPtrGStrdup (browse_dialog_title);
			gnome_icon_entry_construct(Handle, native_history_id, native_browse_dialog_title);
			GLib.Marshaller.Free (native_history_id);
			GLib.Marshaller.Free (native_browse_dialog_title);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_entry_set_icon(IntPtr raw, IntPtr filename);

		public string Icon { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_icon_entry_set_icon(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_entry_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_icon_entry_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
