// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Obsolete]
	public class Entry : Gtk.Combo, Gtk.Editable {

		[Obsolete]
		protected Entry(GLib.GType gtype) : base(gtype) {}
		public Entry(IntPtr raw) : base(raw) {}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_entry_new(IntPtr history_id);

		public Entry (string history_id) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Entry)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("history_id");
				vals.Add (new GLib.Value (history_id));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_history_id = GLib.Marshaller.StringToPtrGStrdup (history_id);
			Raw = gnome_entry_new(native_history_id);
			GLib.Marshaller.Free (native_history_id);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_entry_get_history_id(IntPtr raw);

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_entry_set_history_id(IntPtr raw, IntPtr history_id);

		[GLib.Property ("history_id")]
		public string HistoryId {
			get  {
				IntPtr raw_ret = gnome_entry_get_history_id(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_entry_set_history_id(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Property ("gtk_entry")]
		public Gtk.Entry GtkEntry {
			get {
				GLib.Value val = GetProperty ("gtk_entry");
				Gtk.Entry ret = (Gtk.Entry) val;
				val.Dispose ();
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ActivatedVMDelegate (IntPtr entry);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_entry_override_activate (IntPtr gtype, ActivatedVMDelegate cb);

		static ActivatedVMDelegate ActivatedVMCallback;

		static void activated_cb (IntPtr entry)
		{
			try {
				Entry entry_managed = GLib.Object.GetObject (entry, false) as Entry;
				entry_managed.OnActivated ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideActivated (GLib.GType gtype)
		{
			if (ActivatedVMCallback == null)
				ActivatedVMCallback = new ActivatedVMDelegate (activated_cb);
			gnomesharp_entry_override_activate (gtype.Val, ActivatedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_entry_base_activate (IntPtr entry);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Entry), ConnectionMethod="OverrideActivated")]
		protected virtual void OnActivated ()
		{
			gnomesharp_entry_base_activate (Handle);
		}

		[GLib.Signal("activate")]
		public event System.EventHandler Activated {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "activate");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_entry_clear_history(IntPtr raw);

		public void ClearHistory() {
			gnome_entry_clear_history(Handle);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gnome_entry_get_max_saved(IntPtr raw);

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_entry_set_max_saved(IntPtr raw, uint max_saved);

		public uint MaxSaved { 
			get {
				uint raw_ret = gnome_entry_get_max_saved(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set {
				gnome_entry_set_max_saved(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_entry_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_entry_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_entry_append_history(IntPtr raw, bool save, IntPtr text);

		public void AppendHistory(bool save, string text) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			gnome_entry_append_history(Handle, save, native_text);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_entry_prepend_history(IntPtr raw, bool save, IntPtr text);

		public void PrependHistory(bool save, string text) {
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			gnome_entry_prepend_history(Handle, save, native_text);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_paste_clipboard(IntPtr raw);

		public void PasteClipboard() {
			gtk_editable_paste_clipboard(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_insert_text(IntPtr raw, IntPtr new_text, int new_text_length, ref int position);

		public void InsertText(string new_text, ref int position) {
			IntPtr native_new_text = GLib.Marshaller.StringToPtrGStrdup (new_text);
			gtk_editable_insert_text(Handle, native_new_text, System.Text.Encoding.UTF8.GetByteCount (new_text), ref position);
			GLib.Marshaller.Free (native_new_text);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_cut_clipboard(IntPtr raw);

		public void CutClipboard() {
			gtk_editable_cut_clipboard(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gtk_editable_get_position(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_set_position(IntPtr raw, int position);

		public int Position { 
			get {
				int raw_ret = gtk_editable_get_position(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				gtk_editable_set_position(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_editable_get_selection_bounds(IntPtr raw, out int start, out int end);

		public bool GetSelectionBounds(out int start, out int end) {
			bool raw_ret = gtk_editable_get_selection_bounds(Handle, out start, out end);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_delete_selection(IntPtr raw);

		public void DeleteSelection() {
			gtk_editable_delete_selection(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_copy_clipboard(IntPtr raw);

		public void CopyClipboard() {
			gtk_editable_copy_clipboard(Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_delete_text(IntPtr raw, int start_pos, int end_pos);

		public void DeleteText(int start_pos, int end_pos) {
			gtk_editable_delete_text(Handle, start_pos, end_pos);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_editable_get_chars(IntPtr raw, int start_pos, int end_pos);

		public string GetChars(int start_pos, int end_pos) {
			IntPtr raw_ret = gtk_editable_get_chars(Handle, start_pos, end_pos);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_editable_get_editable(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_set_editable(IntPtr raw, bool is_editable);

		public bool IsEditable { 
			get {
				bool raw_ret = gtk_editable_get_editable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				gtk_editable_set_editable(Handle, value);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_editable_select_region(IntPtr raw, int start, int end);

		public void SelectRegion(int start, int end) {
			gtk_editable_select_region(Handle, start, end);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ChangedVMDelegate (IntPtr editable);

		static ChangedVMDelegate ChangedVMCallback;

		static void changed_cb (IntPtr editable)
		{
			try {
				Entry editable_managed = GLib.Object.GetObject (editable, false) as Entry;
				editable_managed.OnChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideChanged (GLib.GType gtype)
		{
			if (ChangedVMCallback == null)
				ChangedVMCallback = new ChangedVMDelegate (changed_cb);
			OverrideVirtualMethod (gtype, "changed", ChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Entry), ConnectionMethod="OverrideChanged")]
		protected virtual void OnChanged ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("changed")]
		public event System.EventHandler Changed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextDeletedVMDelegate (IntPtr editable, int start_pos, int end_pos);

		static TextDeletedVMDelegate TextDeletedVMCallback;

		static void textdeleted_cb (IntPtr editable, int start_pos, int end_pos)
		{
			try {
				Entry editable_managed = GLib.Object.GetObject (editable, false) as Entry;
				editable_managed.OnTextDeleted (start_pos, end_pos);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTextDeleted (GLib.GType gtype)
		{
			if (TextDeletedVMCallback == null)
				TextDeletedVMCallback = new TextDeletedVMDelegate (textdeleted_cb);
			OverrideVirtualMethod (gtype, "delete_text", TextDeletedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Entry), ConnectionMethod="OverrideTextDeleted")]
		protected virtual void OnTextDeleted (int start_pos, int end_pos)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (3);
			GLib.Value[] vals = new GLib.Value [3];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (start_pos);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (end_pos);
			inst_and_params.Append (vals [2]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("delete_text")]
		public event Gtk.TextDeletedHandler TextDeleted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "delete_text", typeof (Gtk.TextDeletedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "delete_text", typeof (Gtk.TextDeletedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextInsertedVMDelegate (IntPtr editable, IntPtr text, int length, ref int position);

		static TextInsertedVMDelegate TextInsertedVMCallback;

		static void textinserted_cb (IntPtr editable, IntPtr text, int length, ref int position)
		{
			try {
				Entry editable_managed = GLib.Object.GetObject (editable, false) as Entry;
				editable_managed.OnTextInserted (GLib.Marshaller.Utf8PtrToString (text), ref position);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTextInserted (GLib.GType gtype)
		{
			if (TextInsertedVMCallback == null)
				TextInsertedVMCallback = new TextInsertedVMDelegate (textinserted_cb);
			OverrideVirtualMethod (gtype, "insert_text", TextInsertedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Entry), ConnectionMethod="OverrideTextInserted")]
		protected virtual void OnTextInserted (string text, ref int position)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (4);
			GLib.Value[] vals = new GLib.Value [4];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (text);
			inst_and_params.Append (vals [1]);
			vals [2] = new GLib.Value (System.Text.Encoding.UTF8.GetByteCount (text));
			inst_and_params.Append (vals [2]);
			IntPtr position_ptr = GLib.Marshaller.StructureToPtrAlloc (position);
			vals [3] = new GLib.Value (position_ptr);
			inst_and_params.Append (vals [3]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			position = (int) Marshal.PtrToStructure (position_ptr, typeof (int));
			Marshal.FreeHGlobal (position_ptr);

			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void TextInsertedSignalDelegate (IntPtr arg0, IntPtr arg1, int arg2, ref int arg3, IntPtr gch);

		static void TextInsertedSignalCallback (IntPtr arg0, IntPtr arg1, int arg2, ref int arg3, IntPtr gch)
		{
			Gtk.TextInsertedArgs args = new Gtk.TextInsertedArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[3];
				args.Args[0] = GLib.Marshaller.Utf8PtrToString (arg1);
				args.Args[1] = arg2;
				args.Args[2] = arg3;
				Gtk.TextInsertedHandler handler = (Gtk.TextInsertedHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}

			try {
				arg3 = ((int)args.Args[2]);
			} catch (Exception) {
				Exception ex = new Exception ("args.RetVal or 'out' property unset or set to incorrect type in Gtk.TextInsertedHandler callback");
				GLib.ExceptionManager.RaiseUnhandledException (ex, true);
				// NOTREACHED: above call doesn't return.
				throw ex;
			}
		}

		[GLib.Signal("insert_text")]
		public event Gtk.TextInsertedHandler TextInserted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "insert_text", new TextInsertedSignalDelegate(TextInsertedSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "insert_text", new TextInsertedSignalDelegate(TextInsertedSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

#endregion
	}
}
