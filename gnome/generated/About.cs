// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Obsolete]
	public class About : Gtk.Dialog {

		[Obsolete]
		protected About(GLib.GType gtype) : base(gtype) {}
		public About(IntPtr raw) : base(raw) {}

		[GLib.Property ("comments")]
		public string Comments {
			get {
				GLib.Value val = GetProperty ("comments");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("comments", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("version")]
		public string Version {
			get {
				GLib.Value val = GetProperty ("version");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("version", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("logo")]
		public Gdk.Pixbuf Logo {
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("logo", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("copyright")]
		public string Copyright {
			get {
				GLib.Value val = GetProperty ("copyright");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("copyright", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("translator_credits")]
		public string TranslatorCredits {
			get {
				GLib.Value val = GetProperty ("translator_credits");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("translator_credits", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("name")]
		public new string Name {
			get {
				GLib.Value val = GetProperty ("name");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("name", val);
				val.Dispose ();
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_about_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_about_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_about_construct(IntPtr raw, IntPtr name, IntPtr version, IntPtr copyright, IntPtr comments, IntPtr[] authors, IntPtr[] documenters, IntPtr translator_credits, IntPtr logo_pixbuf);

		public void Construct(string name, string version, string copyright, string comments, string[] authors, string[] documenters, string translator_credits, Gdk.Pixbuf logo_pixbuf) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_version = GLib.Marshaller.StringToPtrGStrdup (version);
			IntPtr native_copyright = GLib.Marshaller.StringToPtrGStrdup (copyright);
			IntPtr native_comments = GLib.Marshaller.StringToPtrGStrdup (comments);
			int cnt_authors = authors == null ? 0 : authors.Length;
			IntPtr[] native_authors = new IntPtr [cnt_authors];
			for (int i = 0; i < cnt_authors; i++)
				native_authors [i] = GLib.Marshaller.StringToPtrGStrdup (authors[i]);
			int cnt_documenters = documenters == null ? 0 : documenters.Length;
			IntPtr[] native_documenters = new IntPtr [cnt_documenters];
			for (int i = 0; i < cnt_documenters; i++)
				native_documenters [i] = GLib.Marshaller.StringToPtrGStrdup (documenters[i]);
			IntPtr native_translator_credits = GLib.Marshaller.StringToPtrGStrdup (translator_credits);
			gnome_about_construct(Handle, native_name, native_version, native_copyright, native_comments, native_authors, native_documenters, native_translator_credits, logo_pixbuf == null ? IntPtr.Zero : logo_pixbuf.Handle);
			GLib.Marshaller.Free (native_name);
			GLib.Marshaller.Free (native_version);
			GLib.Marshaller.Free (native_copyright);
			GLib.Marshaller.Free (native_comments);
			for (int i = 0; i < native_authors.Length; i++) {
				authors [i] = GLib.Marshaller.Utf8PtrToString (native_authors[i]);
				GLib.Marshaller.Free (native_authors[i]);
			}
			for (int i = 0; i < native_documenters.Length; i++) {
				documenters [i] = GLib.Marshaller.Utf8PtrToString (native_documenters[i]);
				GLib.Marshaller.Free (native_documenters[i]);
			}
			GLib.Marshaller.Free (native_translator_credits);
		}

#endregion
#region Customized extensions
#line 1 "About.custom"
// Gnome.About.custom - Gnome About class customizations
//
// Author: Mike Kestner <mkestner@novell.com>
//
// Copyright (C) 2005 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.
	
	
		[DllImport("gnomeui-2")]
		static extern IntPtr gnome_about_new(IntPtr name, IntPtr version, IntPtr copyright, IntPtr comments, IntPtr[] authors, IntPtr[] documenters, IntPtr translator_credits, IntPtr logo_pixbuf);

		IntPtr[] NullTerm (string[] src)
		{
			if (src == null || src.Length == 0)
				return null;
			IntPtr[] result = new IntPtr [src.Length + 1];
			for (int i = 0; i < src.Length; i++)
				result [i] = GLib.Marshaller.StringToPtrGStrdup (src [i]);
			result [src.Length] = IntPtr.Zero;
			return result;
		}

		void ReleaseArray (IntPtr[] ptrs)
		{
			if (ptrs == null)
				return;
			foreach (IntPtr p in ptrs)
				GLib.Marshaller.Free (p);
		}

		public About (string name, string version, string copyright, string comments, string[] authors, string[] documenters, string translator_credits, Gdk.Pixbuf logo_pixbuf) : base (IntPtr.Zero)
		{
			IntPtr nname = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr nversion = GLib.Marshaller.StringToPtrGStrdup (version);
			IntPtr ncopyright = GLib.Marshaller.StringToPtrGStrdup (copyright);
			IntPtr ncomments = GLib.Marshaller.StringToPtrGStrdup (comments);
			IntPtr ntranslator_credits = GLib.Marshaller.StringToPtrGStrdup (translator_credits);
			IntPtr[] nauthors = NullTerm (authors);
			IntPtr[] ndocumenters = NullTerm (documenters);

			if (GetType () != typeof (About)) {
				CreateNativeObject (new string[0], new GLib.Value[0]);
				gnome_about_construct (Handle, nname, nversion, ncopyright, ncomments, nauthors, ndocumenters, ntranslator_credits, logo_pixbuf == null ? IntPtr.Zero : logo_pixbuf.Handle);
			} else
				Raw = gnome_about_new (nname, nversion, ncopyright, ncomments, nauthors, ndocumenters, ntranslator_credits, (logo_pixbuf != null) ? logo_pixbuf.Handle : IntPtr.Zero);

			GLib.Marshaller.Free (nname);
			GLib.Marshaller.Free (nversion);
			GLib.Marshaller.Free (ncopyright);
			GLib.Marshaller.Free (ncomments);
			GLib.Marshaller.Free (ntranslator_credits);
			ReleaseArray (nauthors);
			ReleaseArray (ndocumenters);
		}


#endregion
	}
}
