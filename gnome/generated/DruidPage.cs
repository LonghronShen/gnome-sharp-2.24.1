// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Obsolete]
	public class DruidPage : Gtk.Bin {

		[Obsolete]
		protected DruidPage(GLib.GType gtype) : base(gtype) {}
		public DruidPage(IntPtr raw) : base(raw) {}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_druid_page_new();

		public DruidPage () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (DruidPage)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gnome_druid_page_new();
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void PreparedVMDelegate (IntPtr druid_page, IntPtr druid);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_druidpage_override_prepare (IntPtr gtype, PreparedVMDelegate cb);

		static PreparedVMDelegate PreparedVMCallback;

		static void prepared_cb (IntPtr druid_page, IntPtr druid)
		{
			try {
				DruidPage druid_page_managed = GLib.Object.GetObject (druid_page, false) as DruidPage;
				druid_page_managed.OnPrepared (GLib.Object.GetObject(druid) as Gtk.Widget);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverridePrepared (GLib.GType gtype)
		{
			if (PreparedVMCallback == null)
				PreparedVMCallback = new PreparedVMDelegate (prepared_cb);
			gnomesharp_druidpage_override_prepare (gtype.Val, PreparedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_druidpage_base_prepare (IntPtr druid_page, IntPtr druid);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.DruidPage), ConnectionMethod="OverridePrepared")]
		protected virtual void OnPrepared (Gtk.Widget druid)
		{
			gnomesharp_druidpage_base_prepare (Handle, druid == null ? IntPtr.Zero : druid.Handle);
		}

		[GLib.Signal("prepare")]
		public event Gnome.PreparedHandler Prepared {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "prepare", typeof (Gnome.PreparedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "prepare", typeof (Gnome.PreparedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool NextClickedVMDelegate (IntPtr druid_page, IntPtr druid);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_druidpage_override_next (IntPtr gtype, NextClickedVMDelegate cb);

		static NextClickedVMDelegate NextClickedVMCallback;

		static bool nextclicked_cb (IntPtr druid_page, IntPtr druid)
		{
			try {
				DruidPage druid_page_managed = GLib.Object.GetObject (druid_page, false) as DruidPage;
				return druid_page_managed.OnNextClicked (GLib.Object.GetObject(druid) as Gtk.Widget);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideNextClicked (GLib.GType gtype)
		{
			if (NextClickedVMCallback == null)
				NextClickedVMCallback = new NextClickedVMDelegate (nextclicked_cb);
			gnomesharp_druidpage_override_next (gtype.Val, NextClickedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnomesharp_druidpage_base_next (IntPtr druid_page, IntPtr druid);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.DruidPage), ConnectionMethod="OverrideNextClicked")]
		protected virtual bool OnNextClicked (Gtk.Widget druid)
		{
			bool __ret = gnomesharp_druidpage_base_next (Handle, druid == null ? IntPtr.Zero : druid.Handle);
			return __ret;
		}

		[GLib.Signal("next")]
		public event Gnome.NextClickedHandler NextClicked {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "next", typeof (Gnome.NextClickedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "next", typeof (Gnome.NextClickedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void FinishClickedVMDelegate (IntPtr druid_page, IntPtr druid);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_druidpage_override_finish (IntPtr gtype, FinishClickedVMDelegate cb);

		static FinishClickedVMDelegate FinishClickedVMCallback;

		static void finishclicked_cb (IntPtr druid_page, IntPtr druid)
		{
			try {
				DruidPage druid_page_managed = GLib.Object.GetObject (druid_page, false) as DruidPage;
				druid_page_managed.OnFinishClicked (GLib.Object.GetObject(druid) as Gtk.Widget);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideFinishClicked (GLib.GType gtype)
		{
			if (FinishClickedVMCallback == null)
				FinishClickedVMCallback = new FinishClickedVMDelegate (finishclicked_cb);
			gnomesharp_druidpage_override_finish (gtype.Val, FinishClickedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_druidpage_base_finish (IntPtr druid_page, IntPtr druid);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.DruidPage), ConnectionMethod="OverrideFinishClicked")]
		protected virtual void OnFinishClicked (Gtk.Widget druid)
		{
			gnomesharp_druidpage_base_finish (Handle, druid == null ? IntPtr.Zero : druid.Handle);
		}

		[GLib.Signal("finish")]
		public event Gnome.FinishClickedHandler FinishClicked {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "finish", typeof (Gnome.FinishClickedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "finish", typeof (Gnome.FinishClickedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool BackClickedVMDelegate (IntPtr druid_page, IntPtr druid);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_druidpage_override_back (IntPtr gtype, BackClickedVMDelegate cb);

		static BackClickedVMDelegate BackClickedVMCallback;

		static bool backclicked_cb (IntPtr druid_page, IntPtr druid)
		{
			try {
				DruidPage druid_page_managed = GLib.Object.GetObject (druid_page, false) as DruidPage;
				return druid_page_managed.OnBackClicked (GLib.Object.GetObject(druid) as Gtk.Widget);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideBackClicked (GLib.GType gtype)
		{
			if (BackClickedVMCallback == null)
				BackClickedVMCallback = new BackClickedVMDelegate (backclicked_cb);
			gnomesharp_druidpage_override_back (gtype.Val, BackClickedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnomesharp_druidpage_base_back (IntPtr druid_page, IntPtr druid);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.DruidPage), ConnectionMethod="OverrideBackClicked")]
		protected virtual bool OnBackClicked (Gtk.Widget druid)
		{
			bool __ret = gnomesharp_druidpage_base_back (Handle, druid == null ? IntPtr.Zero : druid.Handle);
			return __ret;
		}

		[GLib.Signal("back")]
		public event Gnome.BackClickedHandler BackClicked {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "back", typeof (Gnome.BackClickedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "back", typeof (Gnome.BackClickedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool CancelClickedVMDelegate (IntPtr druid_page, IntPtr druid);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_druidpage_override_cancel (IntPtr gtype, CancelClickedVMDelegate cb);

		static CancelClickedVMDelegate CancelClickedVMCallback;

		static bool cancelclicked_cb (IntPtr druid_page, IntPtr druid)
		{
			try {
				DruidPage druid_page_managed = GLib.Object.GetObject (druid_page, false) as DruidPage;
				return druid_page_managed.OnCancelClicked (GLib.Object.GetObject(druid) as Gtk.Widget);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideCancelClicked (GLib.GType gtype)
		{
			if (CancelClickedVMCallback == null)
				CancelClickedVMCallback = new CancelClickedVMDelegate (cancelclicked_cb);
			gnomesharp_druidpage_override_cancel (gtype.Val, CancelClickedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnomesharp_druidpage_base_cancel (IntPtr druid_page, IntPtr druid);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.DruidPage), ConnectionMethod="OverrideCancelClicked")]
		protected virtual bool OnCancelClicked (Gtk.Widget druid)
		{
			bool __ret = gnomesharp_druidpage_base_cancel (Handle, druid == null ? IntPtr.Zero : druid.Handle);
			return __ret;
		}

		[GLib.Signal("cancel")]
		public event Gnome.CancelClickedHandler CancelClicked {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "cancel", typeof (Gnome.CancelClickedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "cancel", typeof (Gnome.CancelClickedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_druid_page_back(IntPtr raw);

		public bool Back() {
			bool raw_ret = gnome_druid_page_back(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_druid_page_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_druid_page_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_druid_page_prepare(IntPtr raw);

		public void Prepare() {
			gnome_druid_page_prepare(Handle);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_druid_page_cancel(IntPtr raw);

		public bool Cancel() {
			bool raw_ret = gnome_druid_page_cancel(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_druid_page_next(IntPtr raw);

		public bool Next() {
			bool raw_ret = gnome_druid_page_next(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_druid_page_finish(IntPtr raw);

		public void Finish() {
			gnome_druid_page_finish(Handle);
		}

#endregion
	}
}
