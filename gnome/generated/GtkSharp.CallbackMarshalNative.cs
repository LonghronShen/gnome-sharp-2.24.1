// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GtkSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate void CallbackMarshalNative(IntPtr objekt, IntPtr data, uint n_args, IntPtr args);

	internal class CallbackMarshalInvoker {

		CallbackMarshalNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~CallbackMarshalInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal CallbackMarshalInvoker (CallbackMarshalNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal CallbackMarshalInvoker (CallbackMarshalNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal CallbackMarshalInvoker (CallbackMarshalNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gtk.CallbackMarshal Handler {
			get {
				return new Gtk.CallbackMarshal(InvokeNative);
			}
		}

		void InvokeNative (Gtk.Object objekt, IntPtr data, uint n_args, Gtk.Arg args)
		{
			IntPtr native_args = GLib.Marshaller.StructureToPtrAlloc (args);
			native_cb (objekt == null ? IntPtr.Zero : objekt.Handle, __data, n_args, native_args);
			args = Gtk.Arg.New (native_args);
			Marshal.FreeHGlobal (native_args);
		}
	}

	internal class CallbackMarshalWrapper {

		public void NativeCallback (IntPtr objekt, IntPtr data, uint n_args, IntPtr args)
		{
			try {
				managed (GLib.Object.GetObject(objekt) as Gtk.Object, data, n_args, Gtk.Arg.New (args));
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal CallbackMarshalNative NativeDelegate;
		Gtk.CallbackMarshal managed;

		public CallbackMarshalWrapper (Gtk.CallbackMarshal managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new CallbackMarshalNative (NativeCallback);
		}

		public static Gtk.CallbackMarshal GetManagedDelegate (CallbackMarshalNative native)
		{
			if (native == null)
				return null;
			CallbackMarshalWrapper wrapper = (CallbackMarshalWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
