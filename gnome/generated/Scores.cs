// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Obsolete]
	public class Scores : Gtk.Dialog {

		[Obsolete]
		protected Scores(GLib.GType gtype) : base(gtype) {}
		public Scores(IntPtr raw) : base(raw) {}

		protected Scores() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_scores_set_def_color(IntPtr raw, IntPtr value);

		public Gdk.Color DefColor { 
			set {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gnome_scores_set_def_color(Handle, native_value);
				value = Gdk.Color.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_scores_set_current_player(IntPtr raw, int i);

		public int CurrentPlayer { 
			set {
				gnome_scores_set_current_player(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_scores_set_color(IntPtr raw, uint n, IntPtr col);

		public void SetColor(uint n, Gdk.Color col) {
			IntPtr native_col = GLib.Marshaller.StructureToPtrAlloc (col);
			gnome_scores_set_color(Handle, n, native_col);
			col = Gdk.Color.New (native_col);
			Marshal.FreeHGlobal (native_col);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_scores_set_logo_label_title(IntPtr raw, IntPtr txt);

		public string LogoLabelTitle { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_scores_set_logo_label_title(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_scores_set_logo_pixmap(IntPtr raw, IntPtr pix_name);

		public string LogoPixmap { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_scores_set_logo_pixmap(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_scores_set_logo_widget(IntPtr raw, IntPtr w);

		public Gtk.Widget LogoWidget { 
			set {
				gnome_scores_set_logo_widget(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_scores_set_logo_label(IntPtr raw, IntPtr txt, IntPtr font, IntPtr col);

		public void SetLogoLabel(string txt, string font, Gdk.Color col) {
			IntPtr native_txt = GLib.Marshaller.StringToPtrGStrdup (txt);
			IntPtr native_font = GLib.Marshaller.StringToPtrGStrdup (font);
			IntPtr native_col = GLib.Marshaller.StructureToPtrAlloc (col);
			gnome_scores_set_logo_label(Handle, native_txt, native_font, native_col);
			GLib.Marshaller.Free (native_txt);
			GLib.Marshaller.Free (native_font);
			col = Gdk.Color.New (native_col);
			Marshal.FreeHGlobal (native_col);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_scores_set_colors(IntPtr raw, IntPtr value);

		public Gdk.Color Colors { 
			set {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gnome_scores_set_colors(Handle, native_value);
				value = Gdk.Color.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_scores_construct(IntPtr raw, uint n_scores, IntPtr names, out float scores, IntPtr times, bool clear);

		public float Construct(uint n_scores, string names, System.DateTime times, bool clear) {
			float scores;
			gnome_scores_construct(Handle, n_scores, GLib.Marshaller.StringToPtrGStrdup(names), out scores, GLib.Marshaller.DateTimeTotime_t (times), clear);
			return scores;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_scores_display_with_pixmap(IntPtr pixmap_logo, IntPtr app_name, IntPtr level, int pos);

		public static Gtk.Widget DisplayWithPixmap(string pixmap_logo, string app_name, string level, int pos) {
			IntPtr native_pixmap_logo = GLib.Marshaller.StringToPtrGStrdup (pixmap_logo);
			IntPtr native_app_name = GLib.Marshaller.StringToPtrGStrdup (app_name);
			IntPtr native_level = GLib.Marshaller.StringToPtrGStrdup (level);
			IntPtr raw_ret = gnome_scores_display_with_pixmap(native_pixmap_logo, native_app_name, native_level, pos);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			GLib.Marshaller.Free (native_pixmap_logo);
			GLib.Marshaller.Free (native_app_name);
			GLib.Marshaller.Free (native_level);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_scores_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_scores_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
#region Customized extensions
#line 1 "Scores.custom"
// Scores.custom - Gnome.Scores customizations
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

		[DllImport("gnomeui-2")]
		static extern IntPtr gnome_scores_new(uint n_scores, IntPtr names, out float scores, IntPtr times, bool clear);
                
		public Scores (uint n_scores, string names, out float scores, System.DateTime times, bool clear) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Scores)) {
				CreateNativeObject (new string[0], new GLib.Value[0]);
				scores = Construct (n_scores, names, times, clear);
				return;
			}
			IntPtr native = GLib.Marshaller.StringToPtrGStrdup (names);
			Raw = gnome_scores_new(n_scores, native, out scores, GLib.Marshaller.DateTimeTotime_t (times), clear);
			GLib.Marshaller.Free (native);
		}

#endregion
	}
}
