// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GnomeSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate void TriggerActionFunctionNative(IntPtr msg, IntPtr level, IntPtr[] supinfo);

	internal class TriggerActionFunctionInvoker {

		TriggerActionFunctionNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~TriggerActionFunctionInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal TriggerActionFunctionInvoker (TriggerActionFunctionNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal TriggerActionFunctionInvoker (TriggerActionFunctionNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal TriggerActionFunctionInvoker (TriggerActionFunctionNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gnome.TriggerActionFunction Handler {
			get {
				return new Gnome.TriggerActionFunction(InvokeNative);
			}
		}

		void InvokeNative (string msg, string level, string[] supinfo)
		{
			int cnt_supinfo = supinfo == null ? 0 : supinfo.Length;
			IntPtr[] native_supinfo = new IntPtr [cnt_supinfo];
			for (int i = 0; i < cnt_supinfo; i++)
				native_supinfo [i] = GLib.Marshaller.StringToPtrGStrdup (supinfo[i]);
			native_cb (GLib.Marshaller.StringToPtrGStrdup(msg), GLib.Marshaller.StringToPtrGStrdup(level), native_supinfo);
			for (int i = 0; i < native_supinfo.Length; i++) {
				supinfo [i] = GLib.Marshaller.Utf8PtrToString (native_supinfo[i]);
				GLib.Marshaller.Free (native_supinfo[i]);
			}
		}
	}

	internal class TriggerActionFunctionWrapper {

		public void NativeCallback (IntPtr msg, IntPtr level, IntPtr[] supinfo)
		{
			try {
				managed (GLib.Marshaller.PtrToStringGFree(msg), GLib.Marshaller.PtrToStringGFree(level), GLib.Marshaller.Utf8PtrToString (supinfo));
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal TriggerActionFunctionNative NativeDelegate;
		Gnome.TriggerActionFunction managed;

		public TriggerActionFunctionWrapper (Gnome.TriggerActionFunction managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new TriggerActionFunctionNative (NativeCallback);
		}

		public static Gnome.TriggerActionFunction GetManagedDelegate (TriggerActionFunctionNative native)
		{
			if (native == null)
				return null;
			TriggerActionFunctionWrapper wrapper = (TriggerActionFunctionWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
