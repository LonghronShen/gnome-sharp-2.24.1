// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GnomeSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
	internal delegate void UISignalConnectFuncNative(IntPtr uiinfo, IntPtr signal_name, IntPtr uibdata);

	internal class UISignalConnectFuncInvoker {

		UISignalConnectFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~UISignalConnectFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal UISignalConnectFuncInvoker (UISignalConnectFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal UISignalConnectFuncInvoker (UISignalConnectFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal UISignalConnectFuncInvoker (UISignalConnectFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Gnome.UISignalConnectFunc Handler {
			get {
				return new Gnome.UISignalConnectFunc(InvokeNative);
			}
		}

		void InvokeNative (Gnome.UIInfo uiinfo, string signal_name, Gnome.UIBuilderData uibdata)
		{
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			IntPtr native_signal_name = GLib.Marshaller.StringToPtrGStrdup (signal_name);
			IntPtr native_uibdata = GLib.Marshaller.StructureToPtrAlloc (uibdata);
			native_cb (native_uiinfo, native_signal_name, native_uibdata);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
			GLib.Marshaller.Free (native_signal_name);
			uibdata = Gnome.UIBuilderData.New (native_uibdata);
			Marshal.FreeHGlobal (native_uibdata);
		}
	}

	internal class UISignalConnectFuncWrapper {

		public void NativeCallback (IntPtr uiinfo, IntPtr signal_name, IntPtr uibdata)
		{
			try {
				managed (Gnome.UIInfo.New (uiinfo), GLib.Marshaller.Utf8PtrToString (signal_name), Gnome.UIBuilderData.New (uibdata));
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal UISignalConnectFuncNative NativeDelegate;
		Gnome.UISignalConnectFunc managed;

		public UISignalConnectFuncWrapper (Gnome.UISignalConnectFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new UISignalConnectFuncNative (NativeCallback);
		}

		public static Gnome.UISignalConnectFunc GetManagedDelegate (UISignalConnectFuncNative native)
		{
			if (native == null)
				return null;
			UISignalConnectFuncWrapper wrapper = (UISignalConnectFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
