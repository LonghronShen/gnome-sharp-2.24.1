// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Obsolete]
	public class IconList : Gnome.Canvas {

		[Obsolete]
		protected IconList(GLib.GType gtype) : base(gtype) {}
		public IconList(IntPtr raw) : base(raw) {}

		protected IconList() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void IconUnselectedVMDelegate (IntPtr gil, int num, IntPtr evnt);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconlist_override_unselect_icon (IntPtr gtype, IconUnselectedVMDelegate cb);

		static IconUnselectedVMDelegate IconUnselectedVMCallback;

		static void iconunselected_cb (IntPtr gil, int num, IntPtr evnt)
		{
			try {
				IconList gil_managed = GLib.Object.GetObject (gil, false) as IconList;
				gil_managed.OnIconUnselected (num, Gdk.Event.GetEvent (evnt));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideIconUnselected (GLib.GType gtype)
		{
			if (IconUnselectedVMCallback == null)
				IconUnselectedVMCallback = new IconUnselectedVMDelegate (iconunselected_cb);
			gnomesharp_iconlist_override_unselect_icon (gtype.Val, IconUnselectedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconlist_base_unselect_icon (IntPtr gil, int num, IntPtr evnt);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconList), ConnectionMethod="OverrideIconUnselected")]
		protected virtual void OnIconUnselected (int num, Gdk.Event evnt)
		{
			gnomesharp_iconlist_base_unselect_icon (Handle, num, evnt == null ? IntPtr.Zero : evnt.Handle);
		}

		[GLib.Signal("unselect_icon")]
		public event Gnome.IconUnselectedHandler IconUnselected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "unselect_icon", typeof (Gnome.IconUnselectedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "unselect_icon", typeof (Gnome.IconUnselectedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void IconFocusedVMDelegate (IntPtr gil, int num);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconlist_override_focus_icon (IntPtr gtype, IconFocusedVMDelegate cb);

		static IconFocusedVMDelegate IconFocusedVMCallback;

		static void iconfocused_cb (IntPtr gil, int num)
		{
			try {
				IconList gil_managed = GLib.Object.GetObject (gil, false) as IconList;
				gil_managed.OnIconFocused (num);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideIconFocused (GLib.GType gtype)
		{
			if (IconFocusedVMCallback == null)
				IconFocusedVMCallback = new IconFocusedVMDelegate (iconfocused_cb);
			gnomesharp_iconlist_override_focus_icon (gtype.Val, IconFocusedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconlist_base_focus_icon (IntPtr gil, int num);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconList), ConnectionMethod="OverrideIconFocused")]
		protected virtual void OnIconFocused (int num)
		{
			gnomesharp_iconlist_base_focus_icon (Handle, num);
		}

		[GLib.Signal("focus_icon")]
		public event Gnome.IconFocusedHandler IconFocused {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "focus_icon", typeof (Gnome.IconFocusedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "focus_icon", typeof (Gnome.IconFocusedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void IconSelectedVMDelegate (IntPtr gil, int num, IntPtr evnt);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconlist_override_select_icon (IntPtr gtype, IconSelectedVMDelegate cb);

		static IconSelectedVMDelegate IconSelectedVMCallback;

		static void iconselected_cb (IntPtr gil, int num, IntPtr evnt)
		{
			try {
				IconList gil_managed = GLib.Object.GetObject (gil, false) as IconList;
				gil_managed.OnIconSelected (num, Gdk.Event.GetEvent (evnt));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideIconSelected (GLib.GType gtype)
		{
			if (IconSelectedVMCallback == null)
				IconSelectedVMCallback = new IconSelectedVMDelegate (iconselected_cb);
			gnomesharp_iconlist_override_select_icon (gtype.Val, IconSelectedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconlist_base_select_icon (IntPtr gil, int num, IntPtr evnt);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconList), ConnectionMethod="OverrideIconSelected")]
		protected virtual void OnIconSelected (int num, Gdk.Event evnt)
		{
			gnomesharp_iconlist_base_select_icon (Handle, num, evnt == null ? IntPtr.Zero : evnt.Handle);
		}

		[GLib.Signal("select_icon")]
		public event Gnome.IconSelectedHandler IconSelected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "select_icon", typeof (Gnome.IconSelectedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "select_icon", typeof (Gnome.IconSelectedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MoveCursorVMDelegate (IntPtr gil, int dir, bool clear_selection);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconlist_override_move_cursor (IntPtr gtype, MoveCursorVMDelegate cb);

		static MoveCursorVMDelegate MoveCursorVMCallback;

		static void movecursor_cb (IntPtr gil, int dir, bool clear_selection)
		{
			try {
				IconList gil_managed = GLib.Object.GetObject (gil, false) as IconList;
				gil_managed.OnMoveCursor ((Gtk.DirectionType) dir, clear_selection);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideMoveCursor (GLib.GType gtype)
		{
			if (MoveCursorVMCallback == null)
				MoveCursorVMCallback = new MoveCursorVMDelegate (movecursor_cb);
			gnomesharp_iconlist_override_move_cursor (gtype.Val, MoveCursorVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconlist_base_move_cursor (IntPtr gil, int dir, bool clear_selection);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconList), ConnectionMethod="OverrideMoveCursor")]
		protected virtual void OnMoveCursor (Gtk.DirectionType dir, bool clear_selection)
		{
			gnomesharp_iconlist_base_move_cursor (Handle, (int) dir, clear_selection);
		}

		[GLib.Signal("move_cursor")]
		public event Gnome.MoveCursorHandler MoveCursor {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_cursor", typeof (Gnome.MoveCursorArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "move_cursor", typeof (Gnome.MoveCursorArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ToggleCursorSelectionVMDelegate (IntPtr gil);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconlist_override_toggle_cursor_selection (IntPtr gtype, ToggleCursorSelectionVMDelegate cb);

		static ToggleCursorSelectionVMDelegate ToggleCursorSelectionVMCallback;

		static void togglecursorselection_cb (IntPtr gil)
		{
			try {
				IconList gil_managed = GLib.Object.GetObject (gil, false) as IconList;
				gil_managed.OnToggleCursorSelection ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideToggleCursorSelection (GLib.GType gtype)
		{
			if (ToggleCursorSelectionVMCallback == null)
				ToggleCursorSelectionVMCallback = new ToggleCursorSelectionVMDelegate (togglecursorselection_cb);
			gnomesharp_iconlist_override_toggle_cursor_selection (gtype.Val, ToggleCursorSelectionVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconlist_base_toggle_cursor_selection (IntPtr gil);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconList), ConnectionMethod="OverrideToggleCursorSelection")]
		protected virtual void OnToggleCursorSelection ()
		{
			gnomesharp_iconlist_base_toggle_cursor_selection (Handle);
		}

		[GLib.Signal("toggle_cursor_selection")]
		public event System.EventHandler ToggleCursorSelection {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggle_cursor_selection");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "toggle_cursor_selection");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool TextChangedVMDelegate (IntPtr gil, int num, IntPtr new_text);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_iconlist_override_text_changed (IntPtr gtype, TextChangedVMDelegate cb);

		static TextChangedVMDelegate TextChangedVMCallback;

		static bool textchanged_cb (IntPtr gil, int num, IntPtr new_text)
		{
			try {
				IconList gil_managed = GLib.Object.GetObject (gil, false) as IconList;
				return gil_managed.OnTextChanged (num, GLib.Marshaller.Utf8PtrToString (new_text));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideTextChanged (GLib.GType gtype)
		{
			if (TextChangedVMCallback == null)
				TextChangedVMCallback = new TextChangedVMDelegate (textchanged_cb);
			gnomesharp_iconlist_override_text_changed (gtype.Val, TextChangedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnomesharp_iconlist_base_text_changed (IntPtr gil, int num, IntPtr new_text);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconList), ConnectionMethod="OverrideTextChanged")]
		protected virtual bool OnTextChanged (int num, string new_text)
		{
			IntPtr native_new_text = GLib.Marshaller.StringToPtrGStrdup (new_text);
			bool __ret = gnomesharp_iconlist_base_text_changed (Handle, num, native_new_text);
			GLib.Marshaller.Free (native_new_text);
			return __ret;
		}

		[GLib.Signal("text_changed")]
		public event Gnome.TextChangedHandler TextChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "text_changed", typeof (Gnome.TextChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "text_changed", typeof (Gnome.TextChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_select_icon(IntPtr raw, int pos);

		public void SelectIcon(int pos) {
			gnome_icon_list_select_icon(Handle, pos);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_insert_pixbuf(IntPtr raw, int pos, IntPtr im, IntPtr icon_filename, IntPtr text);

		public void InsertPixbuf(int pos, Gdk.Pixbuf im, string icon_filename, string text) {
			IntPtr native_icon_filename = GLib.Marshaller.StringToPtrGStrdup (icon_filename);
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			gnome_icon_list_insert_pixbuf(Handle, pos, im == null ? IntPtr.Zero : im.Handle, native_icon_filename, native_text);
			GLib.Marshaller.Free (native_icon_filename);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_list_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_icon_list_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_icon_list_unselect_all(IntPtr raw);

		public int UnselectAll() {
			int raw_ret = gnome_icon_list_unselect_all(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_icon_list_get_items_per_line(IntPtr raw);

		public int ItemsPerLine { 
			get {
				int raw_ret = gnome_icon_list_get_items_per_line(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_list_get_icon_pixbuf_item(IntPtr raw, int idx);

		public Gnome.CanvasPixbuf GetIconPixbufItem(int idx) {
			IntPtr raw_ret = gnome_icon_list_get_icon_pixbuf_item(Handle, idx);
			Gnome.CanvasPixbuf ret = GLib.Object.GetObject(raw_ret) as Gnome.CanvasPixbuf;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_icon_list_append(IntPtr raw, IntPtr icon_filename, IntPtr text);

		public int Append(string icon_filename, string text) {
			IntPtr native_icon_filename = GLib.Marshaller.StringToPtrGStrdup (icon_filename);
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			int raw_ret = gnome_icon_list_append(Handle, native_icon_filename, native_text);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_icon_filename);
			GLib.Marshaller.Free (native_text);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_set_row_spacing(IntPtr raw, int pixels);

		public int RowSpacing { 
			set {
				gnome_icon_list_set_row_spacing(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_icon_list_get_selection_mode(IntPtr raw);

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_set_selection_mode(IntPtr raw, int mode);

		public Gtk.SelectionMode SelectionMode { 
			get {
				int raw_ret = gnome_icon_list_get_selection_mode(Handle);
				Gtk.SelectionMode ret = (Gtk.SelectionMode) raw_ret;
				return ret;
			}
			set {
				gnome_icon_list_set_selection_mode(Handle, (int) value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_set_text_spacing(IntPtr raw, int pixels);

		public int TextSpacing { 
			set {
				gnome_icon_list_set_text_spacing(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_insert(IntPtr raw, int pos, IntPtr icon_filename, IntPtr text);

		public void Insert(int pos, string icon_filename, string text) {
			IntPtr native_icon_filename = GLib.Marshaller.StringToPtrGStrdup (icon_filename);
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			gnome_icon_list_insert(Handle, pos, native_icon_filename, native_text);
			GLib.Marshaller.Free (native_icon_filename);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_freeze(IntPtr raw);

		public new void Freeze() {
			gnome_icon_list_freeze(Handle);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_list_get_icon_data(IntPtr raw, int pos);

		public IntPtr GetIconData(int pos) {
			IntPtr raw_ret = gnome_icon_list_get_icon_data(Handle, pos);
			IntPtr ret = raw_ret;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_set_icon_data(IntPtr raw, int idx, IntPtr data);

		public void SetIconData(int idx, IntPtr data) {
			gnome_icon_list_set_icon_data(Handle, idx, data);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_set_icon_width(IntPtr raw, int w);

		public int IconWidth { 
			set {
				gnome_icon_list_set_icon_width(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_focus_icon(IntPtr raw, int idx);

		public void FocusIcon(int idx) {
			gnome_icon_list_focus_icon(Handle, idx);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern uint gnome_icon_list_get_num_icons(IntPtr raw);

		public uint NumIcons { 
			get {
				uint raw_ret = gnome_icon_list_get_num_icons(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_remove(IntPtr raw, int pos);

		public void Remove(int pos) {
			gnome_icon_list_remove(Handle, pos);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_set_icon_border(IntPtr raw, int pixels);

		public int IconBorder { 
			set {
				gnome_icon_list_set_icon_border(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_list_get_icon_filename(IntPtr raw, int idx);

		public string GetIconFilename(int idx) {
			IntPtr raw_ret = gnome_icon_list_get_icon_filename(Handle, idx);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_moveto(IntPtr raw, int pos, double yalign);

		public void Moveto(int pos, double yalign) {
			gnome_icon_list_moveto(Handle, pos, yalign);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_select_all(IntPtr raw);

		public void SelectAll() {
			gnome_icon_list_select_all(Handle);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_icon_list_get_icon_at(IntPtr raw, int x, int y);

		public int GetIconAt(int x, int y) {
			int raw_ret = gnome_icon_list_get_icon_at(Handle, x, y);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_construct(IntPtr raw, uint icon_width, IntPtr adj, int flags);

		public void Construct(uint icon_width, Gtk.Adjustment adj, int flags) {
			gnome_icon_list_construct(Handle, icon_width, adj == null ? IntPtr.Zero : adj.Handle, flags);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_list_get_icon_text_item(IntPtr raw, int idx);

		public Gnome.IconTextItem GetIconTextItem(int idx) {
			IntPtr raw_ret = gnome_icon_list_get_icon_text_item(Handle, idx);
			Gnome.IconTextItem ret = GLib.Object.GetObject(raw_ret) as Gnome.IconTextItem;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_icon_list_find_icon_from_filename(IntPtr raw, IntPtr filename);

		public int FindIconFromFilename(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			int raw_ret = gnome_icon_list_find_icon_from_filename(Handle, native_filename);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_set_separators(IntPtr raw, IntPtr sep);

		public string Separators { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_icon_list_set_separators(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_clear(IntPtr raw);

		public void Clear() {
			gnome_icon_list_clear(Handle);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_set_col_spacing(IntPtr raw, int pixels);

		public int ColSpacing { 
			set {
				gnome_icon_list_set_col_spacing(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_unselect_icon(IntPtr raw, int pos);

		public void UnselectIcon(int pos) {
			gnome_icon_list_unselect_icon(Handle, pos);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_list_thaw(IntPtr raw);

		public new void Thaw() {
			gnome_icon_list_thaw(Handle);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_icon_list_find_icon_from_data(IntPtr raw, IntPtr data);

		public int FindIconFromData(IntPtr data) {
			int raw_ret = gnome_icon_list_find_icon_from_data(Handle, data);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_icon_list_append_pixbuf(IntPtr raw, IntPtr im, IntPtr icon_filename, IntPtr text);

		public int AppendPixbuf(Gdk.Pixbuf im, string icon_filename, string text) {
			IntPtr native_icon_filename = GLib.Marshaller.StringToPtrGStrdup (icon_filename);
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			int raw_ret = gnome_icon_list_append_pixbuf(Handle, im == null ? IntPtr.Zero : im.Handle, native_icon_filename, native_text);
			int ret = raw_ret;
			GLib.Marshaller.Free (native_icon_filename);
			GLib.Marshaller.Free (native_text);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "IconList.custom"
// IconList.custom - customizations to Gnome.IconList
//
// Authors: Mike Kestner  <mkestner@ximian.com>
//
// Copyright (c) 2004 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("gnomeui-2")]
		static extern IntPtr gnome_icon_list_get_selection (IntPtr raw);

		public int[] Selection {
			get {
				IntPtr list_ptr = gnome_icon_list_get_selection (Handle);
				if (list_ptr == IntPtr.Zero)
					return new int [0];

				GLib.List list = new GLib.List (list_ptr, typeof (int));
				int[] result = new int [list.Count];
				int i = 0;
				foreach (int val in list)
					result [i++] = val;
				return result;
			}
		}

		[DllImport("gnomeui-2")]
		static extern IntPtr gnome_icon_list_new(uint icon_width, IntPtr adj, int flags);

		public IconList (uint icon_width, Gtk.Adjustment adj, int flags) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (IconList)) {
				CreateNativeObject (new string[0], new GLib.Value[0]);
				Construct (icon_width, adj, flags);
				return;
			}
			Raw = gnome_icon_list_new(icon_width, (adj != null) ? adj.Handle : IntPtr.Zero, flags);
		}

#endregion
	}
}
