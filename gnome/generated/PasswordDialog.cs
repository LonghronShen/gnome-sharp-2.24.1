// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class PasswordDialog : Gtk.Dialog {

		[Obsolete]
		protected PasswordDialog(GLib.GType gtype) : base(gtype) {}
		public PasswordDialog(IntPtr raw) : base(raw) {}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_password_dialog_new(IntPtr dialog_title, IntPtr message, IntPtr username, IntPtr password, bool readonly_username);

		public PasswordDialog (string dialog_title, string message, string username, string password, bool readonly_username) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (PasswordDialog)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_dialog_title = GLib.Marshaller.StringToPtrGStrdup (dialog_title);
			IntPtr native_message = GLib.Marshaller.StringToPtrGStrdup (message);
			IntPtr native_username = GLib.Marshaller.StringToPtrGStrdup (username);
			IntPtr native_password = GLib.Marshaller.StringToPtrGStrdup (password);
			Raw = gnome_password_dialog_new(native_dialog_title, native_message, native_username, native_password, readonly_username);
			GLib.Marshaller.Free (native_dialog_title);
			GLib.Marshaller.Free (native_message);
			GLib.Marshaller.Free (native_username);
			GLib.Marshaller.Free (native_password);
		}

		[GLib.Property ("message-markup")]
		public string MessageMarkup {
			get {
				GLib.Value val = GetProperty ("message-markup");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("message-markup", val);
				val.Dispose ();
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_show_domain(IntPtr raw, bool show);

		[GLib.Property ("show-domain")]
		public bool ShowDomain {
			get {
				GLib.Value val = GetProperty ("show-domain");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gnome_password_dialog_set_show_domain(Handle, value);
			}
		}

		[GLib.Property ("message")]
		public string Message {
			get {
				GLib.Value val = GetProperty ("message");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("message", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("remember-mode")]
		public Gnome.PasswordDialogRemember RememberMode {
			get {
				GLib.Value val = GetProperty ("remember-mode");
				Gnome.PasswordDialogRemember ret = (Gnome.PasswordDialogRemember) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("remember-mode", val);
				val.Dispose ();
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_show_userpass_buttons(IntPtr raw, bool show_userpass_buttons);

		[GLib.Property ("show-userpass-buttons")]
		public bool ShowUserpassButtons {
			get {
				GLib.Value val = GetProperty ("show-userpass-buttons");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gnome_password_dialog_set_show_userpass_buttons(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_show_new_password(IntPtr raw, bool show);

		[GLib.Property ("show-new-password")]
		public bool ShowNewPassword {
			get {
				GLib.Value val = GetProperty ("show-new-password");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gnome_password_dialog_set_show_new_password(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_show_new_password_quality(IntPtr raw, bool show);

		[GLib.Property ("show-new-password-quality")]
		public bool ShowNewPasswordQuality {
			get {
				GLib.Value val = GetProperty ("show-new-password-quality");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gnome_password_dialog_set_show_new_password_quality(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_password_dialog_get_password(IntPtr raw);

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_password(IntPtr raw, IntPtr password);

		[GLib.Property ("password")]
		public string Password {
			get  {
				IntPtr raw_ret = gnome_password_dialog_get_password(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_password_dialog_set_password(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_show_remember(IntPtr raw, bool show_remember);

		[GLib.Property ("show-remember")]
		public bool ShowRemember {
			get {
				GLib.Value val = GetProperty ("show-remember");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gnome_password_dialog_set_show_remember(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_show_password(IntPtr raw, bool show);

		[GLib.Property ("show-password")]
		public bool ShowPassword {
			get {
				GLib.Value val = GetProperty ("show-password");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gnome_password_dialog_set_show_password(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_password_dialog_get_username(IntPtr raw);

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_username(IntPtr raw, IntPtr username);

		[GLib.Property ("username")]
		public string Username {
			get  {
				IntPtr raw_ret = gnome_password_dialog_get_username(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_password_dialog_set_username(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_show_username(IntPtr raw, bool show);

		[GLib.Property ("show-username")]
		public bool ShowUsername {
			get {
				GLib.Value val = GetProperty ("show-username");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gnome_password_dialog_set_show_username(Handle, value);
			}
		}

		[GLib.Property ("anonymous")]
		public bool Anonymous {
			get {
				GLib.Value val = GetProperty ("anonymous");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("anonymous", val);
				val.Dispose ();
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_readonly_username(IntPtr raw, bool read_only);

		[GLib.Property ("readonly-username")]
		public bool ReadonlyUsername {
			get {
				GLib.Value val = GetProperty ("readonly-username");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gnome_password_dialog_set_readonly_username(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_password_dialog_get_domain(IntPtr raw);

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_domain(IntPtr raw, IntPtr domain);

		[GLib.Property ("domain")]
		public string Domain {
			get  {
				IntPtr raw_ret = gnome_password_dialog_get_domain(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_password_dialog_set_domain(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_password_dialog_get_new_password(IntPtr raw);

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_new_password(IntPtr raw, IntPtr password);

		[GLib.Property ("new-password")]
		public string NewPassword {
			get  {
				IntPtr raw_ret = gnome_password_dialog_get_new_password(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_password_dialog_set_new_password(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_readonly_domain(IntPtr raw, bool read_only);

		[GLib.Property ("readonly-domain")]
		public bool ReadonlyDomain {
			get {
				GLib.Value val = GetProperty ("readonly-domain");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set  {
				gnome_password_dialog_set_readonly_domain(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_password_dialog_get_remember(IntPtr raw);

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_remember(IntPtr raw, int remember);

		public Gnome.PasswordDialogRemember Remember { 
			get {
				int raw_ret = gnome_password_dialog_get_remember(Handle);
				Gnome.PasswordDialogRemember ret = (Gnome.PasswordDialogRemember) raw_ret;
				return ret;
			}
			set {
				gnome_password_dialog_set_remember(Handle, (int) value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_password_dialog_run_and_block(IntPtr raw);

		public bool RunAndBlock() {
			bool raw_ret = gnome_password_dialog_run_and_block(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_password_dialog_anon_selected(IntPtr raw);

		public bool AnonSelected() {
			bool raw_ret = gnome_password_dialog_anon_selected(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_password_dialog_set_password_quality_func(IntPtr raw, GnomeSharp.PasswordDialogQualityFuncNative func, IntPtr data, GLib.DestroyNotify dnotify);

		public Gnome.PasswordDialogQualityFunc PasswordQualityFunc { 
			set {
				GnomeSharp.PasswordDialogQualityFuncWrapper value_wrapper = new GnomeSharp.PasswordDialogQualityFuncWrapper (value);
				IntPtr data;
				GLib.DestroyNotify dnotify;
				if (value == null) {
					data = IntPtr.Zero;
					dnotify = null;
				} else {
					data = (IntPtr) GCHandle.Alloc (value_wrapper);
					dnotify = GLib.DestroyHelper.NotifyHandler;
				}
				gnome_password_dialog_set_password_quality_func(Handle, value_wrapper.NativeDelegate, data, dnotify);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_password_dialog_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_password_dialog_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
