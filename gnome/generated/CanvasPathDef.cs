// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class CanvasPathDef : GLib.Opaque {

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_canvas_path_def_length(IntPtr raw);

		public int Length() {
			int raw_ret = gnome_canvas_path_def_length(Handle);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_path_def_lineto(IntPtr raw, double x, double y);

		public void LineTo(double x, double y) {
			gnome_canvas_path_def_lineto(Handle, x, y);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_canvas_path_def_all_closed(IntPtr raw);

		public bool AllClosed() {
			bool raw_ret = gnome_canvas_path_def_all_closed(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_path_def_reset(IntPtr raw);

		public void Reset() {
			gnome_canvas_path_def_reset(Handle);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_canvas_path_def_all_open(IntPtr raw);

		public bool AllOpen() {
			bool raw_ret = gnome_canvas_path_def_all_open(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_concat(IntPtr list);

		public static Gnome.CanvasPathDef Concat(GLib.SList list) {
			IntPtr raw_ret = gnome_canvas_path_def_concat(list == null ? IntPtr.Zero : list.Handle);
			Gnome.CanvasPathDef ret = raw_ret == IntPtr.Zero ? null : (Gnome.CanvasPathDef) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.CanvasPathDef), false);
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_duplicate(IntPtr raw);

		public Gnome.CanvasPathDef Duplicate() {
			IntPtr raw_ret = gnome_canvas_path_def_duplicate(Handle);
			Gnome.CanvasPathDef ret = raw_ret == IntPtr.Zero ? null : (Gnome.CanvasPathDef) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.CanvasPathDef), false);
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_bpath(IntPtr raw);

		public Art.Bpath Bpath() {
			IntPtr raw_ret = gnome_canvas_path_def_bpath(Handle);
			Art.Bpath ret = Art.Bpath.New (raw_ret);
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_canvas_path_def_any_closed(IntPtr raw);

		public bool AnyClosed() {
			bool raw_ret = gnome_canvas_path_def_any_closed(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_path_def_moveto(IntPtr raw, double x, double y);

		public void MoveTo(double x, double y) {
			gnome_canvas_path_def_moveto(Handle, x, y);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_path_def_finish(IntPtr raw);

		public void Finish() {
			gnome_canvas_path_def_finish(Handle);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_canvas_path_def_has_currentpoint(IntPtr raw);

		public bool HasCurrentpoint { 
			get {
				bool raw_ret = gnome_canvas_path_def_has_currentpoint(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_open_parts(IntPtr raw);

		public Gnome.CanvasPathDef OpenParts() {
			IntPtr raw_ret = gnome_canvas_path_def_open_parts(Handle);
			Gnome.CanvasPathDef ret = raw_ret == IntPtr.Zero ? null : (Gnome.CanvasPathDef) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.CanvasPathDef), false);
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_canvas_path_def_is_empty(IntPtr raw);

		public bool IsEmpty { 
			get {
				bool raw_ret = gnome_canvas_path_def_is_empty(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_canvas_path_def_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_path_def_ensure_space(IntPtr raw, int space);

		public void EnsureSpace(int space) {
			gnome_canvas_path_def_ensure_space(Handle, space);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_path_def_currentpoint(IntPtr raw, IntPtr p);

		public void Currentpoint(Art.Point p) {
			IntPtr native_p = GLib.Marshaller.StructureToPtrAlloc (p);
			gnome_canvas_path_def_currentpoint(Handle, native_p);
			p = Art.Point.New (native_p);
			Marshal.FreeHGlobal (native_p);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_first_bpath(IntPtr raw);

		public Art.Bpath FirstBpath() {
			IntPtr raw_ret = gnome_canvas_path_def_first_bpath(Handle);
			Art.Bpath ret = Art.Bpath.New (raw_ret);
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_path_def_copy(IntPtr raw, IntPtr src);

		public void Copy(Gnome.CanvasPathDef src) {
			gnome_canvas_path_def_copy(Handle, src == null ? IntPtr.Zero : src.Handle);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_path_def_closepath(IntPtr raw);

		public void Closepath() {
			gnome_canvas_path_def_closepath(Handle);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_last_bpath(IntPtr raw);

		public Art.Bpath LastBpath() {
			IntPtr raw_ret = gnome_canvas_path_def_last_bpath(Handle);
			Art.Bpath ret = Art.Bpath.New (raw_ret);
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_closed_parts(IntPtr raw);

		public Gnome.CanvasPathDef ClosedParts() {
			IntPtr raw_ret = gnome_canvas_path_def_closed_parts(Handle);
			Gnome.CanvasPathDef ret = raw_ret == IntPtr.Zero ? null : (Gnome.CanvasPathDef) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.CanvasPathDef), false);
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_split(IntPtr raw);

		public Gnome.CanvasPathDef[] Split() {
			IntPtr raw_ret = gnome_canvas_path_def_split(Handle);
			Gnome.CanvasPathDef[] ret = (Gnome.CanvasPathDef[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.SList), true, true, typeof(Gnome.CanvasPathDef));
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_path_def_curveto(IntPtr raw, double x0, double y0, double x1, double y1, double x2, double y2);

		public void CurveTo(double x0, double y0, double x1, double y1, double x2, double y2) {
			gnome_canvas_path_def_curveto(Handle, x0, y0, x1, y1, x2, y2);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_path_def_closepath_current(IntPtr raw);

		public void ClosepathCurrent() {
			gnome_canvas_path_def_closepath_current(Handle);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_close_all(IntPtr raw);

		public Gnome.CanvasPathDef CloseAll() {
			IntPtr raw_ret = gnome_canvas_path_def_close_all(Handle);
			Gnome.CanvasPathDef ret = raw_ret == IntPtr.Zero ? null : (Gnome.CanvasPathDef) GLib.Opaque.GetOpaque (raw_ret, typeof (Gnome.CanvasPathDef), false);
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_path_def_lineto_moving(IntPtr raw, double x, double y);

		public void LineToMoving(double x, double y) {
			gnome_canvas_path_def_lineto_moving(Handle, x, y);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_canvas_path_def_any_open(IntPtr raw);

		public bool AnyOpen() {
			bool raw_ret = gnome_canvas_path_def_any_open(Handle);
			bool ret = raw_ret;
			return ret;
		}

		public CanvasPathDef(IntPtr raw) : base(raw) {}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_new();

		public CanvasPathDef () 
		{
			Raw = gnome_canvas_path_def_new();
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_new_from_bpath(IntPtr bpath);

		public CanvasPathDef (Art.Bpath bpath) 
		{
			IntPtr native_bpath = GLib.Marshaller.StructureToPtrAlloc (bpath);
			Raw = gnome_canvas_path_def_new_from_bpath(native_bpath);
			bpath = Art.Bpath.New (native_bpath);
			Marshal.FreeHGlobal (native_bpath);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_new_from_foreign_bpath(IntPtr bpath);

		public static CanvasPathDef NewFromForeignBpath(Art.Bpath bpath)
		{
			IntPtr native_bpath = GLib.Marshaller.StructureToPtrAlloc (bpath);
			CanvasPathDef result = new CanvasPathDef (gnome_canvas_path_def_new_from_foreign_bpath(native_bpath));
			bpath = Art.Bpath.New (native_bpath);
			Marshal.FreeHGlobal (native_bpath);
			return result;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_new_from_static_bpath(IntPtr bpath);

		public static CanvasPathDef NewFromStaticBpath(Art.Bpath bpath)
		{
			IntPtr native_bpath = GLib.Marshaller.StructureToPtrAlloc (bpath);
			CanvasPathDef result = new CanvasPathDef (gnome_canvas_path_def_new_from_static_bpath(native_bpath));
			bpath = Art.Bpath.New (native_bpath);
			Marshal.FreeHGlobal (native_bpath);
			return result;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_path_def_new_sized(int length);

		public CanvasPathDef (int length) 
		{
			Raw = gnome_canvas_path_def_new_sized(length);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_path_def_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				gnome_canvas_path_def_ref (raw);
				Owned = true;
			}
		}

		[Obsolete("Gnome.CanvasPathDef is now refcounted automatically")]
		public void Ref () {}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_path_def_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				gnome_canvas_path_def_unref (raw);
				Owned = false;
			}
		}

		[Obsolete("Gnome.CanvasPathDef is now refcounted automatically")]
		public void Unref () {}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gnome_canvas_path_def_unref (handle);
				return false;
			}
		}

		~CanvasPathDef ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
#region Customized extensions
#line 1 "CanvasPathDef.custom"
// Gnome.CanvasPathDef.custom - Gnome CanvasPathDef class customizations
//
// Author: Mike Kestner <mkestner@novell.com>
//
// Copyright (C) 2005 Novell, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.
	

		public static CanvasPathDef NewFromBpath (Art.Bpath bpath)
		{
                        IntPtr native_bpath = GLib.Marshaller.StructureToPtrAlloc (bpath);
                        CanvasPathDef result = new CanvasPathDef (gnome_canvas_path_def_new_from_bpath (native_bpath));
			GLib.Marshaller.Free (native_bpath);
			return result;
		}


#endregion
	}
}
