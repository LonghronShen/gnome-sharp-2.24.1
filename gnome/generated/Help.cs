// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Help {

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gnome_help_display_desktop_on_screen(IntPtr program, IntPtr doc_id, IntPtr file_name, IntPtr link_id, IntPtr screen, out IntPtr error);

		public static unsafe bool DisplayDesktopOnScreen(Gnome.Program program, string doc_id, string file_name, string link_id, Gdk.Screen screen) {
			IntPtr native_doc_id = GLib.Marshaller.StringToPtrGStrdup (doc_id);
			IntPtr native_file_name = GLib.Marshaller.StringToPtrGStrdup (file_name);
			IntPtr native_link_id = GLib.Marshaller.StringToPtrGStrdup (link_id);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gnome_help_display_desktop_on_screen(program == null ? IntPtr.Zero : program.Handle, native_doc_id, native_file_name, native_link_id, screen == null ? IntPtr.Zero : screen.Handle, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_doc_id);
			GLib.Marshaller.Free (native_file_name);
			GLib.Marshaller.Free (native_link_id);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gnome_help_display_on_screen(IntPtr file_name, IntPtr link_id, IntPtr screen, out IntPtr error);

		public static unsafe bool DisplayOnScreen(string file_name, string link_id, Gdk.Screen screen) {
			IntPtr native_file_name = GLib.Marshaller.StringToPtrGStrdup (file_name);
			IntPtr native_link_id = GLib.Marshaller.StringToPtrGStrdup (link_id);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gnome_help_display_on_screen(native_file_name, native_link_id, screen == null ? IntPtr.Zero : screen.Handle, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_file_name);
			GLib.Marshaller.Free (native_link_id);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gnome_help_display_uri_on_screen(IntPtr help_uri, IntPtr screen, out IntPtr error);

		public static unsafe bool DisplayUriOnScreen(string help_uri, Gdk.Screen screen) {
			IntPtr native_help_uri = GLib.Marshaller.StringToPtrGStrdup (help_uri);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gnome_help_display_uri_on_screen(native_help_uri, screen == null ? IntPtr.Zero : screen.Handle, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_help_uri);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe bool gnome_help_display_with_doc_id_on_screen(IntPtr program, IntPtr doc_id, IntPtr file_name, IntPtr link_id, IntPtr screen, out IntPtr error);

		public static unsafe bool DisplayWithDocIdOnScreen(Gnome.Program program, string doc_id, string file_name, string link_id, Gdk.Screen screen) {
			IntPtr native_doc_id = GLib.Marshaller.StringToPtrGStrdup (doc_id);
			IntPtr native_file_name = GLib.Marshaller.StringToPtrGStrdup (file_name);
			IntPtr native_link_id = GLib.Marshaller.StringToPtrGStrdup (link_id);
			IntPtr error = IntPtr.Zero;
			bool raw_ret = gnome_help_display_with_doc_id_on_screen(program == null ? IntPtr.Zero : program.Handle, native_doc_id, native_file_name, native_link_id, screen == null ? IntPtr.Zero : screen.Handle, out error);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_doc_id);
			GLib.Marshaller.Free (native_file_name);
			GLib.Marshaller.Free (native_link_id);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
