// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class App : Gtk.Window {

		[Obsolete]
		protected App(GLib.GType gtype) : base(gtype) {}
		public App(IntPtr raw) : base(raw) {}

		protected App() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("app_id")]
		public string AppId {
			get {
				GLib.Value val = GetProperty ("app_id");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("app_id", val);
				val.Dispose ();
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_app_get_name_offset ();

		static uint name_offset = gnomesharp_gnome_app_get_name_offset ();
		public string Name {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + name_offset);
					return GLib.Marshaller.Utf8PtrToString ((*raw_ptr));
				}
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_app_get_prefix_offset ();

		static uint prefix_offset = gnomesharp_gnome_app_get_prefix_offset ();
		public string Prefix {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + prefix_offset);
					return GLib.Marshaller.Utf8PtrToString ((*raw_ptr));
				}
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_app_get_accel_group_offset ();

		static uint accel_group_offset = gnomesharp_gnome_app_get_accel_group_offset ();
		public Gtk.AccelGroup AccelGroup {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + accel_group_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.AccelGroup;
				}
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_app_get_menubar_offset ();

		static uint menubar_offset = gnomesharp_gnome_app_get_menubar_offset ();
		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_set_menus(IntPtr raw, IntPtr menubar);

		public Gtk.MenuBar Menus {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + menubar_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.MenuBar;
				}
			}
			set  {
				gnome_app_set_menus(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_app_get_contents_offset ();

		static uint contents_offset = gnomesharp_gnome_app_get_contents_offset ();
		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_set_contents(IntPtr raw, IntPtr contents);

		public Gtk.Widget Contents {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + contents_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Widget;
				}
			}
			set  {
				gnome_app_set_contents(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_app_get_statusbar_offset ();

		static uint statusbar_offset = gnomesharp_gnome_app_get_statusbar_offset ();
		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_set_statusbar(IntPtr raw, IntPtr statusbar);

		public Gtk.Widget Statusbar {
			get {
				unsafe {
					IntPtr* raw_ptr = (IntPtr*)(((byte*)Handle) + statusbar_offset);
					return GLib.Object.GetObject((*raw_ptr)) as Gtk.Widget;
				}
			}
			set  {
				gnome_app_set_statusbar(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_insert_menus_with_data(IntPtr raw, IntPtr path, IntPtr menuinfo, IntPtr data);

		public void InsertMenusWithData(string path, Gnome.UIInfo menuinfo, IntPtr data) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr native_menuinfo = GLib.Marshaller.StructureToPtrAlloc (menuinfo);
			gnome_app_insert_menus_with_data(Handle, native_path, native_menuinfo, data);
			GLib.Marshaller.Free (native_path);
			menuinfo = Gnome.UIInfo.New (native_menuinfo);
			Marshal.FreeHGlobal (native_menuinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_enable_layout_config(IntPtr raw, bool enable);

		public void EnableLayoutConfig(bool enable) {
			gnome_app_enable_layout_config(Handle, enable);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_app_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_app_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_fill_menu_custom(IntPtr menu_shell, IntPtr uiinfo, IntPtr uibdata, IntPtr accel_group, bool uline_accels, int pos);

		public static void FillMenuCustom(Gtk.MenuShell menu_shell, Gnome.UIInfo uiinfo, Gnome.UIBuilderData uibdata, Gtk.AccelGroup accel_group, bool uline_accels, int pos) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			IntPtr native_uibdata = GLib.Marshaller.StructureToPtrAlloc (uibdata);
			gnome_app_fill_menu_custom(menu_shell == null ? IntPtr.Zero : menu_shell.Handle, native_uiinfo, native_uibdata, accel_group == null ? IntPtr.Zero : accel_group.Handle, uline_accels, pos);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
			uibdata = Gnome.UIBuilderData.New (native_uibdata);
			Marshal.FreeHGlobal (native_uibdata);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_create_menus_interp(IntPtr raw, IntPtr uiinfo, GtkSharp.CallbackMarshalNative relay_func, IntPtr data, GtkSharp.DestroyNotifyNative destroy_func);

		public void CreateMenusInterp(Gnome.UIInfo uiinfo, Gtk.CallbackMarshal relay_func, Gtk.DestroyNotify destroy_func) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			GtkSharp.CallbackMarshalWrapper relay_func_wrapper = new GtkSharp.CallbackMarshalWrapper (relay_func);
			GtkSharp.DestroyNotifyWrapper destroy_func_wrapper = new GtkSharp.DestroyNotifyWrapper (destroy_func);
			gnome_app_create_menus_interp(Handle, native_uiinfo, relay_func_wrapper.NativeDelegate, IntPtr.Zero, destroy_func_wrapper.NativeDelegate);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_install_menu_hints(IntPtr raw, IntPtr uiinfo);

		public void InstallMenuHints(Gnome.UIInfo uiinfo) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			gnome_app_install_menu_hints(Handle, native_uiinfo);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_insert_menus_interp(IntPtr raw, IntPtr path, IntPtr menuinfo, GtkSharp.CallbackMarshalNative relay_func, IntPtr data, GtkSharp.DestroyNotifyNative destroy_func);

		public void InsertMenusInterp(string path, Gnome.UIInfo menuinfo, Gtk.CallbackMarshal relay_func, Gtk.DestroyNotify destroy_func) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr native_menuinfo = GLib.Marshaller.StructureToPtrAlloc (menuinfo);
			GtkSharp.CallbackMarshalWrapper relay_func_wrapper = new GtkSharp.CallbackMarshalWrapper (relay_func);
			GtkSharp.DestroyNotifyWrapper destroy_func_wrapper = new GtkSharp.DestroyNotifyWrapper (destroy_func);
			gnome_app_insert_menus_interp(Handle, native_path, native_menuinfo, relay_func_wrapper.NativeDelegate, IntPtr.Zero, destroy_func_wrapper.NativeDelegate);
			GLib.Marshaller.Free (native_path);
			menuinfo = Gnome.UIInfo.New (native_menuinfo);
			Marshal.FreeHGlobal (native_menuinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_install_appbar_menu_hints(IntPtr appbar, IntPtr uiinfo);

		public static void InstallAppbarMenuHints(Gnome.AppBar appbar, Gnome.UIInfo uiinfo) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			gnome_app_install_appbar_menu_hints(appbar == null ? IntPtr.Zero : appbar.Handle, native_uiinfo);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_create_menus_custom(IntPtr raw, IntPtr uiinfo, IntPtr uibdata);

		public void CreateMenusCustom(Gnome.UIInfo uiinfo, Gnome.UIBuilderData uibdata) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			IntPtr native_uibdata = GLib.Marshaller.StructureToPtrAlloc (uibdata);
			gnome_app_create_menus_custom(Handle, native_uiinfo, native_uibdata);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
			uibdata = Gnome.UIBuilderData.New (native_uibdata);
			Marshal.FreeHGlobal (native_uibdata);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_app_helper_gettext(IntPtr str1ng);

		public static string HelperGettext(string str1ng) {
			IntPtr native_str1ng = GLib.Marshaller.StringToPtrGStrdup (str1ng);
			IntPtr raw_ret = gnome_app_helper_gettext(native_str1ng);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			GLib.Marshaller.Free (native_str1ng);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_set_statusbar_custom(IntPtr raw, IntPtr container, IntPtr statusbar);

		public void SetStatusbarCustom(Gtk.Widget container, Gtk.Widget statusbar) {
			gnome_app_set_statusbar_custom(Handle, container == null ? IntPtr.Zero : container.Handle, statusbar == null ? IntPtr.Zero : statusbar.Handle);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_insert_menus(IntPtr raw, IntPtr path, IntPtr menuinfo);

		public void InsertMenus(string path, Gnome.UIInfo menuinfo) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr native_menuinfo = GLib.Marshaller.StructureToPtrAlloc (menuinfo);
			gnome_app_insert_menus(Handle, native_path, native_menuinfo);
			GLib.Marshaller.Free (native_path);
			menuinfo = Gnome.UIInfo.New (native_menuinfo);
			Marshal.FreeHGlobal (native_menuinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_app_find_menu_pos(IntPtr parent, IntPtr path, out int pos);

		public static Gtk.Widget FindMenuPos(Gtk.Widget parent, string path, out int pos) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr raw_ret = gnome_app_find_menu_pos(parent == null ? IntPtr.Zero : parent.Handle, native_path, out pos);
			Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
			GLib.Marshaller.Free (native_path);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_insert_menus_custom(IntPtr raw, IntPtr path, IntPtr uiinfo, IntPtr uibdata);

		public void InsertMenusCustom(string path, Gnome.UIInfo uiinfo, Gnome.UIBuilderData uibdata) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			IntPtr native_uibdata = GLib.Marshaller.StructureToPtrAlloc (uibdata);
			gnome_app_insert_menus_custom(Handle, native_path, native_uiinfo, native_uibdata);
			GLib.Marshaller.Free (native_path);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
			uibdata = Gnome.UIBuilderData.New (native_uibdata);
			Marshal.FreeHGlobal (native_uibdata);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_create_toolbar_custom(IntPtr raw, IntPtr uiinfo, IntPtr uibdata);

		public void CreateToolbarCustom(Gnome.UIInfo uiinfo, Gnome.UIBuilderData uibdata) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			IntPtr native_uibdata = GLib.Marshaller.StructureToPtrAlloc (uibdata);
			gnome_app_create_toolbar_custom(Handle, native_uiinfo, native_uibdata);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
			uibdata = Gnome.UIBuilderData.New (native_uibdata);
			Marshal.FreeHGlobal (native_uibdata);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_remove_menus(IntPtr raw, IntPtr path, int items);

		public void RemoveMenus(string path, int items) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			gnome_app_remove_menus(Handle, native_path, items);
			GLib.Marshaller.Free (native_path);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_fill_toolbar_custom(IntPtr toolbar, IntPtr uiinfo, IntPtr uibdata, IntPtr accel_group);

		public static void FillToolbarCustom(Gtk.Toolbar toolbar, Gnome.UIInfo uiinfo, Gnome.UIBuilderData uibdata, Gtk.AccelGroup accel_group) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			IntPtr native_uibdata = GLib.Marshaller.StructureToPtrAlloc (uibdata);
			gnome_app_fill_toolbar_custom(toolbar == null ? IntPtr.Zero : toolbar.Handle, native_uiinfo, native_uibdata, accel_group == null ? IntPtr.Zero : accel_group.Handle);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
			uibdata = Gnome.UIBuilderData.New (native_uibdata);
			Marshal.FreeHGlobal (native_uibdata);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_construct(IntPtr raw, IntPtr appname, IntPtr title);

		public void Construct(string appname, string title) {
			IntPtr native_appname = GLib.Marshaller.StringToPtrGStrdup (appname);
			IntPtr native_title = GLib.Marshaller.StringToPtrGStrdup (title);
			gnome_app_construct(Handle, native_appname, native_title);
			GLib.Marshaller.Free (native_appname);
			GLib.Marshaller.Free (native_title);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_fill_menu_with_data(IntPtr menu_shell, IntPtr uiinfo, IntPtr accel_group, bool uline_accels, int pos, IntPtr user_data);

		public static void FillMenuWithData(Gtk.MenuShell menu_shell, Gnome.UIInfo uiinfo, Gtk.AccelGroup accel_group, bool uline_accels, int pos, IntPtr user_data) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			gnome_app_fill_menu_with_data(menu_shell == null ? IntPtr.Zero : menu_shell.Handle, native_uiinfo, accel_group == null ? IntPtr.Zero : accel_group.Handle, uline_accels, pos, user_data);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_create_menus_with_data(IntPtr raw, IntPtr uiinfo, IntPtr user_data);

		public void CreateMenusWithData(Gnome.UIInfo uiinfo, IntPtr user_data) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			gnome_app_create_menus_with_data(Handle, native_uiinfo, user_data);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_install_statusbar_menu_hints(IntPtr bar, IntPtr uiinfo);

		public static void InstallStatusbarMenuHints(Gtk.Statusbar bar, Gnome.UIInfo uiinfo) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			gnome_app_install_statusbar_menu_hints(bar == null ? IntPtr.Zero : bar.Handle, native_uiinfo);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_set_toolbar(IntPtr raw, IntPtr toolbar);

		public Gtk.Toolbar Toolbar { 
			set {
				gnome_app_set_toolbar(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_create_menus(IntPtr raw, IntPtr uiinfo);

		public void CreateMenus(Gnome.UIInfo uiinfo) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			gnome_app_create_menus(Handle, native_uiinfo);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_fill_menu(IntPtr menu_shell, IntPtr uiinfo, IntPtr accel_group, bool uline_accels, int pos);

		public static void FillMenu(Gtk.MenuShell menu_shell, Gnome.UIInfo uiinfo, Gtk.AccelGroup accel_group, bool uline_accels, int pos) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			gnome_app_fill_menu(menu_shell == null ? IntPtr.Zero : menu_shell.Handle, native_uiinfo, accel_group == null ? IntPtr.Zero : accel_group.Handle, uline_accels, pos);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_fill_toolbar(IntPtr toolbar, IntPtr uiinfo, IntPtr accel_group);

		public static void FillToolbar(Gtk.Toolbar toolbar, Gnome.UIInfo uiinfo, Gtk.AccelGroup accel_group) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			gnome_app_fill_toolbar(toolbar == null ? IntPtr.Zero : toolbar.Handle, native_uiinfo, accel_group == null ? IntPtr.Zero : accel_group.Handle);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_create_toolbar(IntPtr raw, IntPtr uiinfo);

		public void CreateToolbar(Gnome.UIInfo uiinfo) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			gnome_app_create_toolbar(Handle, native_uiinfo);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_ui_configure_configurable(IntPtr uiinfo);

		public static void UiConfigureConfigurable(Gnome.UIInfo uiinfo) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			gnome_app_ui_configure_configurable(native_uiinfo);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_remove_menu_range(IntPtr raw, IntPtr path, int start, int items);

		public void RemoveMenuRange(string path, int start, int items) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			gnome_app_remove_menu_range(Handle, native_path, start, items);
			GLib.Marshaller.Free (native_path);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_fill_toolbar_with_data(IntPtr toolbar, IntPtr uiinfo, IntPtr accel_group, IntPtr user_data);

		public static void FillToolbarWithData(Gtk.Toolbar toolbar, Gnome.UIInfo uiinfo, Gtk.AccelGroup accel_group, IntPtr user_data) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			gnome_app_fill_toolbar_with_data(toolbar == null ? IntPtr.Zero : toolbar.Handle, native_uiinfo, accel_group == null ? IntPtr.Zero : accel_group.Handle, user_data);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_create_toolbar_interp(IntPtr raw, IntPtr uiinfo, GtkSharp.CallbackMarshalNative relay_func, IntPtr data, GtkSharp.DestroyNotifyNative destroy_func);

		public void CreateToolbarInterp(Gnome.UIInfo uiinfo, Gtk.CallbackMarshal relay_func, Gtk.DestroyNotify destroy_func) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			GtkSharp.CallbackMarshalWrapper relay_func_wrapper = new GtkSharp.CallbackMarshalWrapper (relay_func);
			GtkSharp.DestroyNotifyWrapper destroy_func_wrapper = new GtkSharp.DestroyNotifyWrapper (destroy_func);
			gnome_app_create_toolbar_interp(Handle, native_uiinfo, relay_func_wrapper.NativeDelegate, IntPtr.Zero, destroy_func_wrapper.NativeDelegate);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_app_create_toolbar_with_data(IntPtr raw, IntPtr uiinfo, IntPtr user_data);

		public void CreateToolbarWithData(Gnome.UIInfo uiinfo, IntPtr user_data) {
			IntPtr native_uiinfo = GLib.Marshaller.StructureToPtrAlloc (uiinfo);
			gnome_app_create_toolbar_with_data(Handle, native_uiinfo, user_data);
			uiinfo = Gnome.UIInfo.New (native_uiinfo);
			Marshal.FreeHGlobal (native_uiinfo);
		}

#endregion
#region Customized extensions
#line 1 "App.custom"
// App.custom - Gnome.App customizations
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.


		[DllImport("gnomeui-2")]
		static extern IntPtr gnome_app_new(IntPtr appname, IntPtr title);
                                                                
		public App (string appname, string title) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (App)) {
				CreateNativeObject (new string[0], new GLib.Value[0]);
				Construct (appname, title);
				return;
			}
			IntPtr nappname = GLib.Marshaller.StringToPtrGStrdup (appname);
			IntPtr ntitle = GLib.Marshaller.StringToPtrGStrdup (title);
			Raw = gnome_app_new(nappname, ntitle);
			GLib.Marshaller.Free (nappname);
			GLib.Marshaller.Free (ntitle);
		}

		[Obsolete("Replaced by overload with no IntPtr arg")]
		public void CreateMenusInterp (Gnome.UIInfo uiinfo, Gtk.CallbackMarshal relay_func, IntPtr data, Gtk.DestroyNotify destroy_func)
		{
			CreateMenusInterp (uiinfo, relay_func, destroy_func);
		}

		[Obsolete("Replaced by overload with no IntPtr arg")]
		public void InsertMenusInterp (string path, Gnome.UIInfo menuinfo, Gtk.CallbackMarshal relay_func, IntPtr data, Gtk.DestroyNotify destroy_func)
		{
			InsertMenusInterp (path, menuinfo, relay_func, destroy_func);
		}

		[Obsolete("Replaced by overload with no IntPtr arg")]
		public void CreateToolbarInterp (Gnome.UIInfo uiinfo, Gtk.CallbackMarshal relay_func, IntPtr data, Gtk.DestroyNotify destroy_func)
		{
			CreateToolbarInterp (uiinfo, relay_func, destroy_func);
		}

#endregion
	}
}
