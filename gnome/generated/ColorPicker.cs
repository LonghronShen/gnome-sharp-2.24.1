// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Obsolete]
	public class ColorPicker : Gtk.Button {

		[Obsolete]
		protected ColorPicker(GLib.GType gtype) : base(gtype) {}
		public ColorPicker(IntPtr raw) : base(raw) {}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_color_picker_new();

		public ColorPicker () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ColorPicker)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gnome_color_picker_new();
		}

		[GLib.Property ("red")]
		public uint Red {
			get {
				GLib.Value val = GetProperty ("red");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("red", val);
				val.Dispose ();
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_color_picker_get_use_alpha(IntPtr raw);

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_color_picker_set_use_alpha(IntPtr raw, bool use_alpha);

		[GLib.Property ("use_alpha")]
		public bool UseAlpha {
			get  {
				bool raw_ret = gnome_color_picker_get_use_alpha(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gnome_color_picker_set_use_alpha(Handle, value);
			}
		}

		[GLib.Property ("blue")]
		public uint Blue {
			get {
				GLib.Value val = GetProperty ("blue");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("blue", val);
				val.Dispose ();
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_color_picker_get_dither(IntPtr raw);

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_color_picker_set_dither(IntPtr raw, bool dither);

		[GLib.Property ("dither")]
		public bool Dither {
			get  {
				bool raw_ret = gnome_color_picker_get_dither(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gnome_color_picker_set_dither(Handle, value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_color_picker_get_title(IntPtr raw);

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_color_picker_set_title(IntPtr raw, IntPtr title);

		[GLib.Property ("title")]
		public string Title {
			get  {
				IntPtr raw_ret = gnome_color_picker_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				gnome_color_picker_set_title(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Property ("alpha")]
		public uint Alpha {
			get {
				GLib.Value val = GetProperty ("alpha");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("alpha", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("green")]
		public uint Green {
			get {
				GLib.Value val = GetProperty ("green");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("green", val);
				val.Dispose ();
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void ColorSetVMDelegate (IntPtr cp, uint r, uint g, uint b, uint a);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_colorpicker_override_color_set (IntPtr gtype, ColorSetVMDelegate cb);

		static ColorSetVMDelegate ColorSetVMCallback;

		static void colorset_cb (IntPtr cp, uint r, uint g, uint b, uint a)
		{
			try {
				ColorPicker cp_managed = GLib.Object.GetObject (cp, false) as ColorPicker;
				cp_managed.OnColorSet (r, g, b, a);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideColorSet (GLib.GType gtype)
		{
			if (ColorSetVMCallback == null)
				ColorSetVMCallback = new ColorSetVMDelegate (colorset_cb);
			gnomesharp_colorpicker_override_color_set (gtype.Val, ColorSetVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_colorpicker_base_color_set (IntPtr cp, uint r, uint g, uint b, uint a);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.ColorPicker), ConnectionMethod="OverrideColorSet")]
		protected virtual void OnColorSet (uint r, uint g, uint b, uint a)
		{
			gnomesharp_colorpicker_base_color_set (Handle, r, g, b, a);
		}

		[GLib.Signal("color_set")]
		public event Gnome.ColorSetHandler ColorSet {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "color_set", typeof (Gnome.ColorSetArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "color_set", typeof (Gnome.ColorSetArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_color_picker_set_i16(IntPtr raw, ushort r, ushort g, ushort b, ushort a);

		public void SetI16(ushort r, ushort g, ushort b, ushort a) {
			gnome_color_picker_set_i16(Handle, r, g, b, a);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_color_picker_set_i8(IntPtr raw, byte r, byte g, byte b, byte a);

		public void SetI8(byte r, byte g, byte b, byte a) {
			gnome_color_picker_set_i8(Handle, r, g, b, a);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_color_picker_get_i16(IntPtr raw, out ushort r, out ushort g, out ushort b, out ushort a);

		public void GetI16(out ushort r, out ushort g, out ushort b, out ushort a) {
			gnome_color_picker_get_i16(Handle, out r, out g, out b, out a);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_color_picker_set_d(IntPtr raw, double r, double g, double b, double a);

		public void SetD(double r, double g, double b, double a) {
			gnome_color_picker_set_d(Handle, r, g, b, a);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_color_picker_get_d(IntPtr raw, out double r, out double g, out double b, out double a);

		public void GetD(out double r, out double g, out double b, out double a) {
			gnome_color_picker_get_d(Handle, out r, out g, out b, out a);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_color_picker_get_i8(IntPtr raw, out byte r, out byte g, out byte b, out byte a);

		public void GetI8(out byte r, out byte g, out byte b, out byte a) {
			gnome_color_picker_get_i8(Handle, out r, out g, out b, out a);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_color_picker_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_color_picker_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
