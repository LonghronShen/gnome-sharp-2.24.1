// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Obsolete]
	public class IconTextItem : Gnome.CanvasItem {

		[Obsolete]
		protected IconTextItem(GLib.GType gtype) : base(gtype) {}
		public IconTextItem(IntPtr raw) : base(raw) {}

		protected IconTextItem() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_text_item_get_text(IntPtr raw);

		public string Text {
			get  {
				IntPtr raw_ret = gnome_icon_text_item_get_text(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void EditingStartedVMDelegate (IntPtr iti);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_icontextitem_override_editing_started (IntPtr gtype, EditingStartedVMDelegate cb);

		static EditingStartedVMDelegate EditingStartedVMCallback;

		static void editingstarted_cb (IntPtr iti)
		{
			try {
				IconTextItem iti_managed = GLib.Object.GetObject (iti, false) as IconTextItem;
				iti_managed.OnEditingStarted ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideEditingStarted (GLib.GType gtype)
		{
			if (EditingStartedVMCallback == null)
				EditingStartedVMCallback = new EditingStartedVMDelegate (editingstarted_cb);
			gnomesharp_icontextitem_override_editing_started (gtype.Val, EditingStartedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_icontextitem_base_editing_started (IntPtr iti);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconTextItem), ConnectionMethod="OverrideEditingStarted")]
		protected virtual void OnEditingStarted ()
		{
			gnomesharp_icontextitem_base_editing_started (Handle);
		}

		[GLib.Signal("editing_started")]
		public event System.EventHandler EditingStarted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "editing_started");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "editing_started");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectionStartedVMDelegate (IntPtr iti);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_icontextitem_override_selection_started (IntPtr gtype, SelectionStartedVMDelegate cb);

		static SelectionStartedVMDelegate SelectionStartedVMCallback;

		static void selectionstarted_cb (IntPtr iti)
		{
			try {
				IconTextItem iti_managed = GLib.Object.GetObject (iti, false) as IconTextItem;
				iti_managed.OnSelectionStarted ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideSelectionStarted (GLib.GType gtype)
		{
			if (SelectionStartedVMCallback == null)
				SelectionStartedVMCallback = new SelectionStartedVMDelegate (selectionstarted_cb);
			gnomesharp_icontextitem_override_selection_started (gtype.Val, SelectionStartedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_icontextitem_base_selection_started (IntPtr iti);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconTextItem), ConnectionMethod="OverrideSelectionStarted")]
		protected virtual void OnSelectionStarted ()
		{
			gnomesharp_icontextitem_base_selection_started (Handle);
		}

		[GLib.Signal("selection_started")]
		public event System.EventHandler SelectionStarted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "selection_started");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "selection_started");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void WidthChangedVMDelegate (IntPtr iti);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_icontextitem_override_width_changed (IntPtr gtype, WidthChangedVMDelegate cb);

		static WidthChangedVMDelegate WidthChangedVMCallback;

		static void widthchanged_cb (IntPtr iti)
		{
			try {
				IconTextItem iti_managed = GLib.Object.GetObject (iti, false) as IconTextItem;
				iti_managed.OnWidthChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideWidthChanged (GLib.GType gtype)
		{
			if (WidthChangedVMCallback == null)
				WidthChangedVMCallback = new WidthChangedVMDelegate (widthchanged_cb);
			gnomesharp_icontextitem_override_width_changed (gtype.Val, WidthChangedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_icontextitem_base_width_changed (IntPtr iti);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconTextItem), ConnectionMethod="OverrideWidthChanged")]
		protected virtual void OnWidthChanged ()
		{
			gnomesharp_icontextitem_base_width_changed (Handle);
		}

		[GLib.Signal("width_changed")]
		public event System.EventHandler WidthChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "width_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "width_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void EditingStoppedVMDelegate (IntPtr iti);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_icontextitem_override_editing_stopped (IntPtr gtype, EditingStoppedVMDelegate cb);

		static EditingStoppedVMDelegate EditingStoppedVMCallback;

		static void editingstopped_cb (IntPtr iti)
		{
			try {
				IconTextItem iti_managed = GLib.Object.GetObject (iti, false) as IconTextItem;
				iti_managed.OnEditingStopped ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideEditingStopped (GLib.GType gtype)
		{
			if (EditingStoppedVMCallback == null)
				EditingStoppedVMCallback = new EditingStoppedVMDelegate (editingstopped_cb);
			gnomesharp_icontextitem_override_editing_stopped (gtype.Val, EditingStoppedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_icontextitem_base_editing_stopped (IntPtr iti);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconTextItem), ConnectionMethod="OverrideEditingStopped")]
		protected virtual void OnEditingStopped ()
		{
			gnomesharp_icontextitem_base_editing_stopped (Handle);
		}

		[GLib.Signal("editing_stopped")]
		public event System.EventHandler EditingStopped {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "editing_stopped");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "editing_stopped");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void HeightChangedVMDelegate (IntPtr iti);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_icontextitem_override_height_changed (IntPtr gtype, HeightChangedVMDelegate cb);

		static HeightChangedVMDelegate HeightChangedVMCallback;

		static void heightchanged_cb (IntPtr iti)
		{
			try {
				IconTextItem iti_managed = GLib.Object.GetObject (iti, false) as IconTextItem;
				iti_managed.OnHeightChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideHeightChanged (GLib.GType gtype)
		{
			if (HeightChangedVMCallback == null)
				HeightChangedVMCallback = new HeightChangedVMDelegate (heightchanged_cb);
			gnomesharp_icontextitem_override_height_changed (gtype.Val, HeightChangedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_icontextitem_base_height_changed (IntPtr iti);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconTextItem), ConnectionMethod="OverrideHeightChanged")]
		protected virtual void OnHeightChanged ()
		{
			gnomesharp_icontextitem_base_height_changed (Handle);
		}

		[GLib.Signal("height_changed")]
		public event System.EventHandler HeightChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "height_changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "height_changed");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void SelectionStoppedVMDelegate (IntPtr iti);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_icontextitem_override_selection_stopped (IntPtr gtype, SelectionStoppedVMDelegate cb);

		static SelectionStoppedVMDelegate SelectionStoppedVMCallback;

		static void selectionstopped_cb (IntPtr iti)
		{
			try {
				IconTextItem iti_managed = GLib.Object.GetObject (iti, false) as IconTextItem;
				iti_managed.OnSelectionStopped ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideSelectionStopped (GLib.GType gtype)
		{
			if (SelectionStoppedVMCallback == null)
				SelectionStoppedVMCallback = new SelectionStoppedVMDelegate (selectionstopped_cb);
			gnomesharp_icontextitem_override_selection_stopped (gtype.Val, SelectionStoppedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_icontextitem_base_selection_stopped (IntPtr iti);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconTextItem), ConnectionMethod="OverrideSelectionStopped")]
		protected virtual void OnSelectionStopped ()
		{
			gnomesharp_icontextitem_base_selection_stopped (Handle);
		}

		[GLib.Signal("selection_stopped")]
		public event System.EventHandler SelectionStopped {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "selection_stopped");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "selection_stopped");
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool TextChangedVMDelegate (IntPtr iti);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_icontextitem_override_text_changed (IntPtr gtype, TextChangedVMDelegate cb);

		static TextChangedVMDelegate TextChangedVMCallback;

		static bool textchanged_cb (IntPtr iti)
		{
			try {
				IconTextItem iti_managed = GLib.Object.GetObject (iti, false) as IconTextItem;
				return iti_managed.OnTextChanged ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call doesn't return
				throw e;
			}
		}

		private static void OverrideTextChanged (GLib.GType gtype)
		{
			if (TextChangedVMCallback == null)
				TextChangedVMCallback = new TextChangedVMDelegate (textchanged_cb);
			gnomesharp_icontextitem_override_text_changed (gtype.Val, TextChangedVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnomesharp_icontextitem_base_text_changed (IntPtr iti);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.IconTextItem), ConnectionMethod="OverrideTextChanged")]
		protected virtual bool OnTextChanged ()
		{
			bool __ret = gnomesharp_icontextitem_base_text_changed (Handle);
			return __ret;
		}

		[GLib.Signal("text_changed")]
		public event Gnome.TextChangedHandler TextChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "text_changed", typeof (Gnome.TextChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "text_changed", typeof (Gnome.TextChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_text_item_start_editing(IntPtr raw);

		public void StartEditing() {
			gnome_icon_text_item_start_editing(Handle);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_text_item_setxy(IntPtr raw, int x, int y);

		public void Setxy(int x, int y) {
			gnome_icon_text_item_setxy(Handle, x, y);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_text_item_focus(IntPtr raw, bool focused);

		public void Focus(bool focused) {
			gnome_icon_text_item_focus(Handle, focused);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_text_item_select(IntPtr raw, bool sel);

		public void Select(bool sel) {
			gnome_icon_text_item_select(Handle, sel);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_text_item_stop_editing(IntPtr raw, bool accept);

		public void StopEditing(bool accept) {
			gnome_icon_text_item_stop_editing(Handle, accept);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_text_item_get_editable(IntPtr raw);

		public Gtk.Editable Editable { 
			get {
				IntPtr raw_ret = gnome_icon_text_item_get_editable(Handle);
				Gtk.Editable ret = Gtk.EditableAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_text_item_configure(IntPtr raw, int x, int y, int width, IntPtr fontname, IntPtr text, bool is_editable, bool is_static);

		public void Configure(int x, int y, int width, string fontname, string text, bool is_editable, bool is_static) {
			IntPtr native_fontname = GLib.Marshaller.StringToPtrGStrdup (fontname);
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			gnome_icon_text_item_configure(Handle, x, y, width, native_fontname, native_text, is_editable, is_static);
			GLib.Marshaller.Free (native_fontname);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_text_item_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_icon_text_item_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
#region Customized extensions
#line 1 "IconTextItem.custom"
//
// Gnome.IconTextItem.custom - Gnome IconTextItem class customizations
//
// Author: Rachel Hestilow <hestilow@ximian.com>
//
// Copyright (C) 2002 Rachel Hestilow
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.

	
public IconTextItem (Gnome.CanvasGroup group) : base (group, GType)
{
}


#endregion
	}
}
