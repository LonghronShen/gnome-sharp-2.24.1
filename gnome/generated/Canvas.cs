// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Canvas : Gtk.Layout {

		[Obsolete]
		protected Canvas(GLib.GType gtype) : base(gtype) {}
		public Canvas(IntPtr raw) : base(raw) {}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_new();

		public Canvas () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Canvas)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gnome_canvas_new();
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_new_aa();

		public static Canvas NewAa()
		{
			Canvas result = new Canvas (gnome_canvas_new_aa());
			return result;
		}

		[GLib.Property ("aa")]
		public bool Aa {
			get {
				GLib.Value val = GetProperty ("aa");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("focused_item")]
		public Gnome.CanvasItem FocusedItem {
			get {
				GLib.Value val = GetProperty ("focused_item");
				Gnome.CanvasItem ret = (Gnome.CanvasItem) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("focused_item", val);
				val.Dispose ();
			}
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		extern static uint gnomesharp_gnome_canvas_get_pixels_per_unit_offset ();

		static uint pixels_per_unit_offset = gnomesharp_gnome_canvas_get_pixels_per_unit_offset ();
		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_set_pixels_per_unit(IntPtr raw, double n);

		public double PixelsPerUnit {
			get {
				unsafe {
					double* raw_ptr = (double*)(((byte*)Handle) + pixels_per_unit_offset);
					return (*raw_ptr);
				}
			}
			set  {
				gnome_canvas_set_pixels_per_unit(Handle, value);
			}
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_canvas_get_center_scroll_region(IntPtr raw);

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_set_center_scroll_region(IntPtr raw, bool center_scroll_region);

		public bool CenterScrollRegion {
			get  {
				bool raw_ret = gnome_canvas_get_center_scroll_region(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				gnome_canvas_set_center_scroll_region(Handle, value);
			}
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_canvas_get_dither(IntPtr raw);

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_set_dither(IntPtr raw, int dither);

		public Gdk.RgbDither Dither {
			get  {
				int raw_ret = gnome_canvas_get_dither(Handle);
				Gdk.RgbDither ret = (Gdk.RgbDither) raw_ret;
				return ret;
			}
			set  {
				gnome_canvas_set_dither(Handle, (int) value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void RenderBackgroundVMDelegate (IntPtr canvas, IntPtr buf);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_canvas_override_render_background (IntPtr gtype, RenderBackgroundVMDelegate cb);

		static RenderBackgroundVMDelegate RenderBackgroundVMCallback;

		static void renderbackground_cb (IntPtr canvas, IntPtr buf)
		{
			try {
				Canvas canvas_managed = GLib.Object.GetObject (canvas, false) as Canvas;
				canvas_managed.OnRenderBackground (Gnome.CanvasBuf.New (buf));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideRenderBackground (GLib.GType gtype)
		{
			if (RenderBackgroundVMCallback == null)
				RenderBackgroundVMCallback = new RenderBackgroundVMDelegate (renderbackground_cb);
			gnomesharp_canvas_override_render_background (gtype.Val, RenderBackgroundVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_canvas_base_render_background (IntPtr canvas, IntPtr buf);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Canvas), ConnectionMethod="OverrideRenderBackground")]
		protected virtual void OnRenderBackground (Gnome.CanvasBuf buf)
		{
			IntPtr native_buf = GLib.Marshaller.StructureToPtrAlloc (buf);
			gnomesharp_canvas_base_render_background (Handle, native_buf);
			buf = Gnome.CanvasBuf.New (native_buf);
			Marshal.FreeHGlobal (native_buf);
		}

		[GLib.Signal("render_background")]
		public event Gnome.RenderBackgroundHandler RenderBackground {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "render_background", typeof (Gnome.RenderBackgroundArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "render_background", typeof (Gnome.RenderBackgroundArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DrawBackgroundVMDelegate (IntPtr canvas, IntPtr drawable, int x, int y, int width, int height);

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_canvas_override_draw_background (IntPtr gtype, DrawBackgroundVMDelegate cb);

		static DrawBackgroundVMDelegate DrawBackgroundVMCallback;

		static void drawbackground_cb (IntPtr canvas, IntPtr drawable, int x, int y, int width, int height)
		{
			try {
				Canvas canvas_managed = GLib.Object.GetObject (canvas, false) as Canvas;
				canvas_managed.OnDrawBackground (GLib.Object.GetObject(drawable) as Gdk.Drawable, x, y, width, height);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDrawBackground (GLib.GType gtype)
		{
			if (DrawBackgroundVMCallback == null)
				DrawBackgroundVMCallback = new DrawBackgroundVMDelegate (drawbackground_cb);
			gnomesharp_canvas_override_draw_background (gtype.Val, DrawBackgroundVMCallback);
		}

		[DllImport ("gnomesharpglue-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnomesharp_canvas_base_draw_background (IntPtr canvas, IntPtr drawable, int x, int y, int width, int height);

		[GLib.DefaultSignalHandler(Type=typeof(Gnome.Canvas), ConnectionMethod="OverrideDrawBackground")]
		protected virtual void OnDrawBackground (Gdk.Drawable drawable, int x, int y, int width, int height)
		{
			gnomesharp_canvas_base_draw_background (Handle, drawable == null ? IntPtr.Zero : drawable.Handle, x, y, width, height);
		}

		[GLib.Signal("draw_background")]
		public event Gnome.DrawBackgroundHandler DrawBackground {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "draw_background", typeof (Gnome.DrawBackgroundArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "draw_background", typeof (Gnome.DrawBackgroundArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_canvas_cap_gdk_to_art(int gdk_cap);

		public static Art.PathStrokeCapType CapGdkToArt(Gdk.CapStyle gdk_cap) {
			int raw_ret = gnome_canvas_cap_gdk_to_art((int) gdk_cap);
			Art.PathStrokeCapType ret = (Art.PathStrokeCapType) raw_ret;
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_c2w(IntPtr raw, int cx, int cy, out double wx, out double wy);

		public void C2w(int cx, int cy, out double wx, out double wy) {
			gnome_canvas_c2w(Handle, cx, cy, out wx, out wy);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_canvas_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern UIntPtr gnome_canvas_get_color_pixel(IntPtr raw, uint rgba);

		public ulong GetColorPixel(uint rgba) {
			UIntPtr raw_ret = gnome_canvas_get_color_pixel(Handle, rgba);
			ulong ret = (ulong) raw_ret;
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_scroll_to(IntPtr raw, int cx, int cy);

		public void ScrollTo(int cx, int cy) {
			gnome_canvas_scroll_to(Handle, cx, cy);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_w2c(IntPtr raw, double wx, double wy, out int cx, out int cy);

		public void W2c(double wx, double wy, out int cx, out int cy) {
			gnome_canvas_w2c(Handle, wx, wy, out cx, out cy);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_window_to_world(IntPtr raw, double winx, double winy, out double worldx, out double worldy);

		public void WindowToWorld(double winx, double winy, out double worldx, out double worldy) {
			gnome_canvas_window_to_world(Handle, winx, winy, out worldx, out worldy);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_request_redraw_uta(IntPtr raw, IntPtr uta);

		public void RequestRedrawUta(Art.Uta uta) {
			gnome_canvas_request_redraw_uta(Handle, uta == null ? IntPtr.Zero : uta.Handle);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_set_scroll_region(IntPtr raw, double x1, double y1, double x2, double y2);

		public void SetScrollRegion(double x1, double y1, double x2, double y2) {
			gnome_canvas_set_scroll_region(Handle, x1, y1, x2, y2);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_w2c_d(IntPtr raw, double wx, double wy, out double cx, out double cy);

		public void W2cD(double wx, double wy, out double cx, out double cy) {
			gnome_canvas_w2c_d(Handle, wx, wy, out cx, out cy);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_set_stipple_origin(IntPtr raw, IntPtr gc);

		public Gdk.GC StippleOrigin { 
			set {
				gnome_canvas_set_stipple_origin(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_get_scroll_region(IntPtr raw, out double x1, out double y1, out double x2, out double y2);

		public void GetScrollRegion(out double x1, out double y1, out double x2, out double y2) {
			gnome_canvas_get_scroll_region(Handle, out x1, out y1, out x2, out y2);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_render_svp(IntPtr buf, IntPtr svp, uint rgba);

		public static void RenderSvp(Gnome.CanvasBuf buf, Art.SVP svp, uint rgba) {
			IntPtr native_buf = GLib.Marshaller.StructureToPtrAlloc (buf);
			IntPtr native_svp = GLib.Marshaller.StructureToPtrAlloc (svp);
			gnome_canvas_render_svp(native_buf, native_svp, rgba);
			buf = Gnome.CanvasBuf.New (native_buf);
			Marshal.FreeHGlobal (native_buf);
			svp = Art.SVP.New (native_svp);
			Marshal.FreeHGlobal (native_svp);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_update_now(IntPtr raw);

		public void UpdateNow() {
			gnome_canvas_update_now(Handle);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_get_scroll_offsets(IntPtr raw, out int cx, out int cy);

		public void GetScrollOffsets(out int cx, out int cy) {
			gnome_canvas_get_scroll_offsets(Handle, out cx, out cy);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_canvas_join_gdk_to_art(int gdk_join);

		public static Art.PathStrokeJoinType JoinGdkToArt(Gdk.JoinStyle gdk_join) {
			int raw_ret = gnome_canvas_join_gdk_to_art((int) gdk_join);
			Art.PathStrokeJoinType ret = (Art.PathStrokeJoinType) raw_ret;
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_request_redraw(IntPtr raw, int x1, int y1, int x2, int y2);

		public void RequestRedraw(int x1, int y1, int x2, int y2) {
			gnome_canvas_request_redraw(Handle, x1, y1, x2, y2);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_canvas_get_miter_points(double x1, double y1, double x2, double y2, double x3, double y3, double width, out double mx1, out double my1, out double mx2, out double my2);

		public static bool GetMiterPoints(double x1, double y1, double x2, double y2, double x3, double y3, double width, out double mx1, out double my1, out double mx2, out double my2) {
			bool raw_ret = gnome_canvas_get_miter_points(x1, y1, x2, y2, x3, y3, width, out mx1, out my1, out mx2, out my2);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_get_butt_points(double x1, double y1, double x2, double y2, double width, int project, out double bx1, out double by1, out double bx2, out double by2);

		public static void GetButtPoints(double x1, double y1, double x2, double y2, double width, int project, out double bx1, out double by1, out double bx2, out double by2) {
			gnome_canvas_get_butt_points(x1, y1, x2, y2, width, project, out bx1, out by1, out bx2, out by2);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_update_svp_clip(IntPtr raw, IntPtr p_svp, IntPtr new_svp, IntPtr clip_svp);

		public void UpdateSvpClip(Art.SVP p_svp, Art.SVP new_svp, Art.SVP clip_svp) {
			IntPtr native_p_svp = GLib.Marshaller.StructureToPtrAlloc (p_svp);
			IntPtr native_new_svp = GLib.Marshaller.StructureToPtrAlloc (new_svp);
			IntPtr native_clip_svp = GLib.Marshaller.StructureToPtrAlloc (clip_svp);
			gnome_canvas_update_svp_clip(Handle, native_p_svp, native_new_svp, native_clip_svp);
			p_svp = Art.SVP.New (native_p_svp);
			Marshal.FreeHGlobal (native_p_svp);
			new_svp = Art.SVP.New (native_new_svp);
			Marshal.FreeHGlobal (native_new_svp);
			clip_svp = Art.SVP.New (native_clip_svp);
			Marshal.FreeHGlobal (native_clip_svp);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_world_to_window(IntPtr raw, double worldx, double worldy, out double winx, out double winy);

		public void WorldToWindow(double worldx, double worldy, out double winx, out double winy) {
			gnome_canvas_world_to_window(Handle, worldx, worldy, out winx, out winy);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_update_bbox(IntPtr item, int x1, int y1, int x2, int y2);

		public static void UpdateBbox(Gnome.CanvasItem item, int x1, int y1, int x2, int y2) {
			gnome_canvas_update_bbox(item == null ? IntPtr.Zero : item.Handle, x1, y1, x2, y2);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_root(IntPtr raw);

		public Gnome.CanvasGroup Root() {
			IntPtr raw_ret = gnome_canvas_root(Handle);
			Gnome.CanvasGroup ret = GLib.Object.GetObject(raw_ret) as Gnome.CanvasGroup;
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_canvas_get_item_at(IntPtr raw, double x, double y);

		public Gnome.CanvasItem GetItemAt(double x, double y) {
			IntPtr raw_ret = gnome_canvas_get_item_at(Handle, x, y);
			Gnome.CanvasItem ret = GLib.Object.GetObject(raw_ret) as Gnome.CanvasItem;
			return ret;
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_canvas_update_svp(IntPtr raw, IntPtr p_svp, IntPtr new_svp);

		public void UpdateSvp(Art.SVP p_svp, Art.SVP new_svp) {
			IntPtr native_p_svp = GLib.Marshaller.StructureToPtrAlloc (p_svp);
			IntPtr native_new_svp = GLib.Marshaller.StructureToPtrAlloc (new_svp);
			gnome_canvas_update_svp(Handle, native_p_svp, native_new_svp);
			p_svp = Art.SVP.New (native_p_svp);
			Marshal.FreeHGlobal (native_p_svp);
			new_svp = Art.SVP.New (native_new_svp);
			Marshal.FreeHGlobal (native_new_svp);
		}

		[DllImport("gnomecanvas-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_canvas_get_color(IntPtr raw, IntPtr spec, IntPtr color);

		public bool GetColor(string spec, out Gdk.Color color) {
			IntPtr native_spec = GLib.Marshaller.StringToPtrGStrdup (spec);
			IntPtr native_color = Marshal.AllocHGlobal (Marshal.SizeOf (typeof (Gdk.Color)));
			bool raw_ret = gnome_canvas_get_color(Handle, native_spec, native_color);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_spec);
			color = Gdk.Color.New (native_color);
			Marshal.FreeHGlobal (native_color);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Canvas.custom"
//
// Gnome.Canvas.custom - Gnome Canvas class customizations
//
// Author: Duncan Mak (duncan@ximian.com)
//         Mike Kestner <mkestner@novell.com>
//
// Copyright (C) 2003 Duncan Mak
// Copyright (C) 2004-2006 Novell, Inc.
//
// This code is inserted after the automatically generated code.
//
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of version 2 of the Lesser GNU General 
// Public License as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program; if not, write to the
// Free Software Foundation, Inc., 59 Temple Place - Suite 330,
// Boston, MA 02111-1307, USA.
	
	
		[DllImport("gnomecanvas-2")]
		static extern void gnome_canvas_w2c_affine(IntPtr raw, double[] affine);

		public void W2cAffine(out double[] affine) {
                        affine = new double [6];
			gnome_canvas_w2c_affine(Handle, affine);
		}

		public Canvas (bool is_aa) : base (IntPtr.Zero)
		{
			string[] names = {"aa"};
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (is_aa);
			CreateNativeObject (names, vals);
		}


#endregion
	}
}
