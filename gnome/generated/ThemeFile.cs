// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ThemeFile : GLib.Opaque {

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern int gnome_theme_file_parse_error_quark();

		[Obsolete]
		public static int ParseErrorQuark() {
			int raw_ret = gnome_theme_file_parse_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_theme_file_get_locale_string(IntPtr raw, IntPtr section, IntPtr keyname, IntPtr val);

		[Obsolete]
		public bool GetLocaleString(string section, string keyname, string val) {
			IntPtr native_section = GLib.Marshaller.StringToPtrGStrdup (section);
			IntPtr native_keyname = GLib.Marshaller.StringToPtrGStrdup (keyname);
			bool raw_ret = gnome_theme_file_get_locale_string(Handle, native_section, native_keyname, GLib.Marshaller.StringToPtrGStrdup(val));
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_section);
			GLib.Marshaller.Free (native_keyname);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_theme_file_to_string(IntPtr raw);

		[Obsolete]
		public override string ToString() {
			IntPtr raw_ret = gnome_theme_file_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_theme_file_get_integer(IntPtr raw, IntPtr section, IntPtr keyname, out int val);

		[Obsolete]
		public bool GetInteger(string section, string keyname, out int val) {
			IntPtr native_section = GLib.Marshaller.StringToPtrGStrdup (section);
			IntPtr native_keyname = GLib.Marshaller.StringToPtrGStrdup (keyname);
			bool raw_ret = gnome_theme_file_get_integer(Handle, native_section, native_keyname, out val);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_section);
			GLib.Marshaller.Free (native_keyname);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_theme_file_get_raw(IntPtr raw, IntPtr section, IntPtr keyname, IntPtr locale, IntPtr val);

		[Obsolete]
		public bool GetRaw(string section, string keyname, string locale, string val) {
			IntPtr native_section = GLib.Marshaller.StringToPtrGStrdup (section);
			IntPtr native_keyname = GLib.Marshaller.StringToPtrGStrdup (keyname);
			IntPtr native_locale = GLib.Marshaller.StringToPtrGStrdup (locale);
			bool raw_ret = gnome_theme_file_get_raw(Handle, native_section, native_keyname, native_locale, GLib.Marshaller.StringToPtrGStrdup(val));
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_section);
			GLib.Marshaller.Free (native_keyname);
			GLib.Marshaller.Free (native_locale);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_theme_file_foreach_key(IntPtr raw, IntPtr section, bool include_localized, GnomeSharp.ThemeFileLineFuncNative func, IntPtr user_data);

		[Obsolete]
		public void ForeachKey(string section, bool include_localized, Gnome.ThemeFileLineFunc func) {
			IntPtr native_section = GLib.Marshaller.StringToPtrGStrdup (section);
			GnomeSharp.ThemeFileLineFuncWrapper func_wrapper = new GnomeSharp.ThemeFileLineFuncWrapper (func);
			gnome_theme_file_foreach_key(Handle, native_section, include_localized, func_wrapper.NativeDelegate, IntPtr.Zero);
			GLib.Marshaller.Free (native_section);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gnome_theme_file_get_string(IntPtr raw, IntPtr section, IntPtr keyname, IntPtr val);

		[Obsolete]
		public bool GetString(string section, string keyname, string val) {
			IntPtr native_section = GLib.Marshaller.StringToPtrGStrdup (section);
			IntPtr native_keyname = GLib.Marshaller.StringToPtrGStrdup (keyname);
			bool raw_ret = gnome_theme_file_get_string(Handle, native_section, native_keyname, GLib.Marshaller.StringToPtrGStrdup(val));
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_section);
			GLib.Marshaller.Free (native_keyname);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_theme_file_foreach_section(IntPtr raw, GnomeSharp.ThemeFileSectionFuncNative func, IntPtr user_data);

		[Obsolete]
		public void ForeachSection(Gnome.ThemeFileSectionFunc func) {
			GnomeSharp.ThemeFileSectionFuncWrapper func_wrapper = new GnomeSharp.ThemeFileSectionFuncWrapper (func);
			gnome_theme_file_foreach_section(Handle, func_wrapper.NativeDelegate, IntPtr.Zero);
		}

		public ThemeFile(IntPtr raw) : base(raw) {}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr gnome_theme_file_new_from_string(IntPtr data, out IntPtr error);

		public unsafe ThemeFile (string data) 
		{
			IntPtr error = IntPtr.Zero;
			Raw = gnome_theme_file_new_from_string(GLib.Marshaller.StringToPtrGStrdup(data), out error);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_theme_file_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			gnome_theme_file_free (raw);
		}

		[Obsolete("Gnome.ThemeFile is now freed automatically")]
		public void Free () {}

		class FinalizerInfo {
			IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				gnome_theme_file_free (handle);
				return false;
			}
		}

		~ThemeFile ()
		{
			if (!Owned)
				return;
			FinalizerInfo info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
