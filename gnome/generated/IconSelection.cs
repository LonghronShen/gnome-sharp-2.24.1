// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gnome {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class IconSelection : Gtk.VBox {

		[Obsolete]
		protected IconSelection(GLib.GType gtype) : base(gtype) {}
		public IconSelection(IntPtr raw) : base(raw) {}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_selection_new();

		public IconSelection () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (IconSelection)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gnome_icon_selection_new();
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_selection_get_gil(IntPtr raw);

		public Gtk.Widget Gil { 
			get {
				IntPtr raw_ret = gnome_icon_selection_get_gil(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_selection_stop_loading(IntPtr raw);

		public void StopLoading() {
			gnome_icon_selection_stop_loading(Handle);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_selection_get_icon(IntPtr raw, bool full_path);

		public string GetIcon(bool full_path) {
			IntPtr raw_ret = gnome_icon_selection_get_icon(Handle, full_path);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_selection_add_directory(IntPtr raw, IntPtr dir);

		public void AddDirectory(string dir) {
			IntPtr native_dir = GLib.Marshaller.StringToPtrGStrdup (dir);
			gnome_icon_selection_add_directory(Handle, native_dir);
			GLib.Marshaller.Free (native_dir);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_selection_show_icons(IntPtr raw);

		public void ShowIcons() {
			gnome_icon_selection_show_icons(Handle);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_selection_get_box(IntPtr raw);

		public Gtk.Widget Box { 
			get {
				IntPtr raw_ret = gnome_icon_selection_get_box(Handle);
				Gtk.Widget ret = GLib.Object.GetObject(raw_ret) as Gtk.Widget;
				return ret;
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_selection_add_defaults(IntPtr raw);

		public void AddDefaults() {
			gnome_icon_selection_add_defaults(Handle);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_selection_select_icon(IntPtr raw, IntPtr filename);

		public void SelectIcon(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			gnome_icon_selection_select_icon(Handle, native_filename);
			GLib.Marshaller.Free (native_filename);
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gnome_icon_selection_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gnome_icon_selection_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gnomeui-2", CallingConvention = CallingConvention.Cdecl)]
		static extern void gnome_icon_selection_clear(IntPtr raw, bool not_shown);

		public void Clear(bool not_shown) {
			gnome_icon_selection_clear(Handle, not_shown);
		}

#endregion
	}
}
